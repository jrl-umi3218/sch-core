<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>oserializer.hpp</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/boost/archive/detail/</path>
    <filename>oserializer_8hpp</filename>
    <class kind="class">boost::archive::save_access</class>
    <class kind="class">boost::archive::detail::oserializer</class>
    <class kind="class">boost::archive::detail::pointer_oserializer</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_primitive</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_only</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_standard</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_conditional</class>
    <class kind="struct">boost::archive::detail::save_pointer_type</class>
    <class kind="struct">boost::archive::detail::save_pointer_type::abstract</class>
    <class kind="struct">boost::archive::detail::save_pointer_type::non_abstract</class>
    <class kind="struct">boost::archive::detail::save_pointer_type::non_polymorphic</class>
    <class kind="struct">boost::archive::detail::save_pointer_type::polymorphic</class>
    <class kind="struct">boost::archive::detail::save_enum_type</class>
    <class kind="struct">boost::archive::detail::save_array_type</class>
    <class kind="struct">boost::archive::check_tracking</class>
    <namespace>boost</namespace>
    <namespace>boost::serialization</namespace>
    <namespace>boost::archive</namespace>
    <namespace>boost::archive::detail</namespace>
    <member kind="function">
      <type>BOOST_DLLEXPORT const basic_pointer_oserializer &amp;</type>
      <name>instantiate_pointer_oserializer</name>
      <anchorfile>namespaceboost_1_1archive_1_1detail.html</anchorfile>
      <anchor>a36a969c98d97fb6bba03fb0646613a94</anchor>
      <arglist>(Archive *, T *) BOOST_USED</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceboost_1_1archive.html</anchorfile>
      <anchor>a75235f1208f1e4e1e183768d5e02944a</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceboost_1_1archive.html</anchorfile>
      <anchor>abd00bd2825ffa3546381a676b8d0cec5</anchor>
      <arglist>(Archive &amp;ar, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CD_Pair.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD/</path>
    <filename>CD__Pair_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="S__Object_8h" name="S_Object.h" local="no" imported="no">sch/S_Object/S_Object.h</includes>
    <includes id="CD__SimplexEnhanced_8h" name="CD_SimplexEnhanced.h" local="no" imported="no">sch/CD/CD_SimplexEnhanced.h</includes>
    <includes id="CD__Depth_8h" name="CD_Depth.h" local="no" imported="no">sch/CD_Penetration/CD_Depth.h</includes>
    <class kind="class">sch::CD_Pair</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>CD_Scene.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD/</path>
    <filename>CD__Scene_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="S__Object_8h" name="S_Object.h" local="no" imported="no">sch/S_Object/S_Object.h</includes>
    <includes id="CD__Pair_8h" name="CD_Pair.h" local="no" imported="no">sch/CD/CD_Pair.h</includes>
    <class kind="class">sch::CD_Scene</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>CD_Simplex.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD/</path>
    <filename>CD__Simplex_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="SCH__Types_8h" name="SCH_Types.h" local="no" imported="no">sch/Matrix/SCH_Types.h</includes>
    <includes id="CD__Simplex_8hxx" name="CD_Simplex.hxx" local="yes" imported="no">CD_Simplex.hxx</includes>
    <class kind="struct">sch::CD_SimplexKeptPoints</class>
    <class kind="class">sch::CD_Simplex</class>
    <namespace>sch</namespace>
    <member kind="enumeration">
      <type></type>
      <name>CD_SimplexType</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Point</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11baa5c6082a32a66d4af6003761ea6deda3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Segment</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bab36aa1ddee8b169c10a889a4e3ab1b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Triangle</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bafc5b37fbb4c185050a98a5aed180bc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Tetrahedron</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11ba2f2014cdc3df6cf071f4a69eaa35dbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_None</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bacf450d6b46df39b660bbb358db5141e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchangeTest</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a284a80995524c3d5eaed3ea51da13643</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchange</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>abdc7bf615642be512fefd34ee873f968</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CD_Simplex.hxx</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD/</path>
    <filename>CD__Simplex_8hxx</filename>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchangeTest</name>
      <anchorfile>CD__Simplex_8hxx.html</anchorfile>
      <anchor>a9d66ebb74020ca33d08345a0d2cb5b54</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchange</name>
      <anchorfile>CD__Simplex_8hxx.html</anchorfile>
      <anchor>a865612df303ff5c546c4012a315a5d7c</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CD_SimplexEnhanced.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD/</path>
    <filename>CD__SimplexEnhanced_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="CD__Simplex_8h" name="CD_Simplex.h" local="no" imported="no">sch/CD/CD_Simplex.h</includes>
    <includes id="CD__SimplexEnhanced_8hxx" name="CD_SimplexEnhanced.hxx" local="yes" imported="no">CD_SimplexEnhanced.hxx</includes>
    <class kind="class">sch::CD_SimplexEnhanced</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>CD_SimplexEnhanced.hxx</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD/</path>
    <filename>CD__SimplexEnhanced_8hxx</filename>
  </compound>
  <compound kind="file">
    <name>GJK.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD/</path>
    <filename>GJK_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <class kind="class">GJK</class>
    <member kind="define">
      <type>#define</type>
      <name>_CLASS_GJK</name>
      <anchorfile>GJK_8h.html</anchorfile>
      <anchor>a90fb392d13e9dfe378c78d607c1184dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CD_Depth.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/CD_Penetration/</path>
    <filename>CD__Depth_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="S__Object_8h" name="S_Object.h" local="no" imported="no">sch/S_Object/S_Object.h</includes>
    <includes id="CD__SimplexEnhanced_8h" name="CD_SimplexEnhanced.h" local="no" imported="no">sch/CD/CD_SimplexEnhanced.h</includes>
    <class kind="class">sch::CD_Depth</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>SimplestParsing.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/File_Parsing/</path>
    <filename>SimplestParsing_8h</filename>
    <class kind="class">FileParsing::SimplestParsing</class>
    <namespace>FileParsing</namespace>
  </compound>
  <compound kind="file">
    <name>QuaternionT.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/Matrix/</path>
    <filename>QuaternionT_8h</filename>
    <class kind="class">CD_Matrix::QuaternionT</class>
    <namespace>CD_Matrix</namespace>
  </compound>
  <compound kind="file">
    <name>SCH_Types.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/Matrix/</path>
    <filename>SCH__Types_8h</filename>
    <includes id="SmallMatrix3x3T_8h" name="SmallMatrix3x3T.h" local="no" imported="no">sch/Matrix/SmallMatrix3x3T.h</includes>
    <includes id="SmallVector3T_8h" name="SmallVector3T.h" local="no" imported="no">sch/Matrix/SmallVector3T.h</includes>
    <includes id="SmallVector4T_8h" name="SmallVector4T.h" local="no" imported="no">sch/Matrix/SmallVector4T.h</includes>
    <includes id="SmallMatrix4x4T_8h" name="SmallMatrix4x4T.h" local="no" imported="no">sch/Matrix/SmallMatrix4x4T.h</includes>
    <includes id="QuaternionT_8h" name="QuaternionT.h" local="no" imported="no">sch/Matrix/QuaternionT.h</includes>
    <namespace>sch</namespace>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a23db84571b7527634d5e5d5fd69995e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector3T&lt; Scalar, false &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a26a421e6cdc08aedcfc5b9c68277f657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector4T&lt; Scalar &gt;</type>
      <name>Vector4</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a4054ebd9c67e205f14399d288090905b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Point3</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ab0c5b1c6e2f86393e75ee9e55e346509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Matrix3x3T&lt; Scalar &gt;</type>
      <name>Matrix3x3</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ad62be10192b061dcae7b013d0f5e194e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::QuaternionT&lt; Scalar &gt;</type>
      <name>Quaternion</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a84a5f2e4a6807b76657edddbd1b53db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Matrix4x4T&lt; Scalar &gt;</type>
      <name>Matrix4x4</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a3041e1b0d9a898938dd026b1bd3d4112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector3T&lt; Scalar, true &gt;</type>
      <name>Vector3NormOptimized</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a49d67c4c14d4386acdf2f084e68d4700</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SmallMatrix3x3T.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/Matrix/</path>
    <filename>SmallMatrix3x3T_8h</filename>
    <class kind="struct">CD_Matrix::Vector3T</class>
    <class kind="class">CD_Matrix::QuaternionT</class>
    <class kind="struct">CD_Matrix::Matrix3x3T</class>
    <namespace>CD_Matrix</namespace>
  </compound>
  <compound kind="file">
    <name>SmallMatrix4x4T.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/Matrix/</path>
    <filename>SmallMatrix4x4T_8h</filename>
    <class kind="struct">CD_Matrix::Matrix4x4T</class>
    <namespace>CD_Matrix</namespace>
  </compound>
  <compound kind="file">
    <name>SmallVector3T.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/Matrix/</path>
    <filename>SmallVector3T_8h</filename>
    <class kind="struct">CD_Matrix::Matrix3x3T</class>
    <class kind="struct">CD_Matrix::Norm</class>
    <class kind="struct">CD_Matrix::Norm&lt; T, false &gt;</class>
    <class kind="struct">CD_Matrix::Vector3T</class>
    <namespace>CD_Matrix</namespace>
  </compound>
  <compound kind="file">
    <name>SmallVector4T.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/Matrix/</path>
    <filename>SmallVector4T_8h</filename>
    <class kind="struct">CD_Matrix::Matrix4x4T</class>
    <class kind="class">CD_Matrix::Vector4T</class>
    <namespace>CD_Matrix</namespace>
  </compound>
  <compound kind="file">
    <name>S_Box.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Box_8h</filename>
    <includes id="S__ObjectNonNormalized_8h" name="S_ObjectNonNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNonNormalized.h</includes>
    <class kind="class">sch::S_Box</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>S_Capsule.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Capsule_8h</filename>
    <includes id="S__ObjectNormalized_8h" name="S_ObjectNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNormalized.h</includes>
    <class kind="class">sch::S_Capsule</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>S_Cone.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Cone_8h</filename>
    <includes id="S__ObjectNonNormalized_8h" name="S_ObjectNonNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNonNormalized.h</includes>
    <class kind="class">sch::S_Cone</class>
    <namespace>sch</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_S_CONE_H_SCH</name>
      <anchorfile>S__Cone_8h.html</anchorfile>
      <anchor>a9023e820063d5ca8997414a080c947ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>S_Cylinder.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Cylinder_8h</filename>
    <includes id="S__ObjectNormalized_8h" name="S_ObjectNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNormalized.h</includes>
    <class kind="class">sch::S_Cylinder</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>S_Object.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Object_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="SCH__Types_8h" name="SCH_Types.h" local="no" imported="no">sch/Matrix/SCH_Types.h</includes>
    <includes id="S__Object_8hxx" name="S_Object.hxx" local="no" imported="no">sch/S_Object/S_Object.hxx</includes>
    <class kind="struct">sch::_TimeStamp</class>
    <class kind="class">sch::S_Object</class>
    <namespace>sch</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_S_OBJECT</name>
      <anchorfile>S__Object_8h.html</anchorfile>
      <anchor>a1b00a525f4f424ad2691a0e5a25bd8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::_TimeStamp</type>
      <name>S_ObjectTimeStamp</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ab167976403857dc3577c4cd022c6c13f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>S_Object.hxx</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Object_8hxx</filename>
  </compound>
  <compound kind="file">
    <name>S_ObjectNonNormalized.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__ObjectNonNormalized_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="S__Object_8h" name="S_Object.h" local="no" imported="no">sch/S_Object/S_Object.h</includes>
    <includes id="S__ObjectNonNormalized_8hxx" name="S_ObjectNonNormalized.hxx" local="no" imported="no">sch/S_Object/S_ObjectNonNormalized.hxx</includes>
    <class kind="class">sch::S_ObjectNonNormalized</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>S_ObjectNonNormalized.hxx</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__ObjectNonNormalized_8hxx</filename>
  </compound>
  <compound kind="file">
    <name>S_ObjectNormalized.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__ObjectNormalized_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="S__Object_8h" name="S_Object.h" local="no" imported="no">sch/S_Object/S_Object.h</includes>
    <includes id="S__ObjectNormalized_8hxx" name="S_ObjectNormalized.hxx" local="no" imported="no">sch/S_Object/S_ObjectNormalized.hxx</includes>
    <class kind="class">sch::S_ObjectNormalized</class>
    <namespace>sch</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_S_OBJECTNORMALIZED_H</name>
      <anchorfile>S__ObjectNormalized_8h.html</anchorfile>
      <anchor>a8720b059fcbf32d307191516f62f3299</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>S_ObjectNormalized.hxx</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__ObjectNormalized_8hxx</filename>
  </compound>
  <compound kind="file">
    <name>S_Point.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Point_8h</filename>
    <includes id="S__ObjectNonNormalized_8h" name="S_ObjectNonNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNonNormalized.h</includes>
    <class kind="class">sch::S_Point</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>S_Sphere.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Sphere_8h</filename>
    <includes id="S__ObjectNormalized_8h" name="S_ObjectNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNormalized.h</includes>
    <class kind="class">sch::S_Sphere</class>
    <namespace>sch</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_S_SPHERE_H</name>
      <anchorfile>S__Sphere_8h.html</anchorfile>
      <anchor>aa8d2e45381c7797809a66145a94da08c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>S_Superellipsoid.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Object/</path>
    <filename>S__Superellipsoid_8h</filename>
    <includes id="S__ObjectNonNormalized_8h" name="S_ObjectNonNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNonNormalized.h</includes>
    <class kind="class">sch::S_Superellipsoid</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>Polyhedron_algorithms.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Polyhedron/</path>
    <filename>Polyhedron__algorithms_8h</filename>
    <includes id="SCH__Types_8h" name="SCH_Types.h" local="no" imported="no">sch/Matrix/SCH_Types.h</includes>
    <includes id="S__PolyhedronVertex_8h" name="S_PolyhedronVertex.h" local="no" imported="no">sch/S_Polyhedron/S_PolyhedronVertex.h</includes>
    <class kind="struct">sch::PolyhedronTriangle</class>
    <class kind="struct">sch::Polyhedron_algorithms</class>
    <namespace>sch</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_POLYHEDRON_ALGORITHMS</name>
      <anchorfile>Polyhedron__algorithms_8h.html</anchorfile>
      <anchor>a83fbcda08c7dea3769e1282c69dc9cd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>S_Polyhedron.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Polyhedron/</path>
    <filename>S__Polyhedron_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="S__ObjectNonNormalized_8h" name="S_ObjectNonNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNonNormalized.h</includes>
    <includes id="S__PolyhedronVertex_8h" name="S_PolyhedronVertex.h" local="no" imported="no">sch/S_Polyhedron/S_PolyhedronVertex.h</includes>
    <includes id="Polyhedron__algorithms_8h" name="Polyhedron_algorithms.h" local="no" imported="no">sch/S_Polyhedron/Polyhedron_algorithms.h</includes>
    <class kind="class">sch::S_Polyhedron</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>S_PolyhedronVertex.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Polyhedron/</path>
    <filename>S__PolyhedronVertex_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="SCH__Types_8h" name="SCH_Types.h" local="no" imported="no">sch/Matrix/SCH_Types.h</includes>
    <includes id="S__PolyhedronVertex_8hxx" name="S_PolyhedronVertex.hxx" local="no" imported="no">sch/S_Polyhedron/S_PolyhedronVertex.hxx</includes>
    <class kind="class">sch::S_PolyhedronVertex</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>S_PolyhedronVertex.hxx</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/S_Polyhedron/</path>
    <filename>S__PolyhedronVertex_8hxx</filename>
  </compound>
  <compound kind="file">
    <name>sch_api.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/</path>
    <filename>sch__api_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>SCH_API</name>
      <anchorfile>sch__api_8h.html</anchorfile>
      <anchor>a6d0fc78a96bfd5665b3f0c88eed31bdf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STP_BigSphere.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/STP-BV/</path>
    <filename>STP__BigSphere_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="STP__Feature_8h" name="STP_Feature.h" local="no" imported="no">sch/STP-BV/STP_Feature.h</includes>
    <class kind="class">sch::STP_BigSphere</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>STP_BV.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/STP-BV/</path>
    <filename>STP__BV_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="S__ObjectNormalized_8h" name="S_ObjectNormalized.h" local="no" imported="no">sch/S_Object/S_ObjectNormalized.h</includes>
    <includes id="STP__Feature_8h" name="STP_Feature.h" local="no" imported="no">sch/STP-BV/STP_Feature.h</includes>
    <class kind="struct">sch::Geometry</class>
    <class kind="struct">sch::s_toruslinkedBV</class>
    <class kind="struct">sch::s_Triangle</class>
    <class kind="struct">sch::s_SphereApproxim</class>
    <class kind="class">sch::s_PointsComparator</class>
    <class kind="class">sch::STP_BV</class>
    <namespace>sch</namespace>
    <member kind="typedef">
      <type>struct sch::s_toruslinkedBV</type>
      <name>toruslinkedBV</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a5acd0335a65507856bfecf941193515e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_Triangle</type>
      <name>Triangle</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ad02b3d5e368caaabe1eff7ad33d557ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_SphereApproxim</type>
      <name>SphereApproxim</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a50488b6de166145f7320dc22de55de99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_PointsComparator</type>
      <name>PointsComparator</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a44c4f840424fb70e78a6f19f89fd08c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveType</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINARY_ARCHIVE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9a3dd05585336ccf671c6058e2782b549c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEXT_ARCHIVE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9a9962c77094354fe5e99e8e1f32dffd93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STP_BV_P.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/STP-BV/</path>
    <filename>STP__BV__P_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="STP__BV_8h" name="STP_BV.h" local="no" imported="no">sch/STP-BV/STP_BV.h</includes>
    <includes id="Polyhedron__algorithms_8h" name="Polyhedron_algorithms.h" local="no" imported="no">sch/S_Polyhedron/Polyhedron_algorithms.h</includes>
    <class kind="class">sch::STP_BV_P</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>STP_Feature.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/STP-BV/</path>
    <filename>STP__Feature_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="SCH__Types_8h" name="SCH_Types.h" local="no" imported="no">sch/Matrix/SCH_Types.h</includes>
    <includes id="STP__Feature_8hxx" name="STP_Feature.hxx" local="no" imported="no">sch/STP-BV/STP_Feature.hxx</includes>
    <class kind="struct">sch::s_STP_VVR</class>
    <class kind="struct">sch::s_STN_VVR</class>
    <class kind="struct">sch::s_STP_STBVData</class>
    <class kind="class">sch::STP_Feature</class>
    <namespace>sch</namespace>
    <member kind="typedef">
      <type>struct sch::s_STP_VVR</type>
      <name>STP_VVR</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>abbeaad29b70f4c43093dcb7daecf9b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STN_VVR</type>
      <name>STN_VVR</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a43b208a34398f097c2c7e5cb780c5da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STP_STBVData</type>
      <name>STP_STBVData</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a386e496f31b5959dc743fcb86b42b513</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>STP_Featuretype</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALLSPHERE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384aadf03b67ba0cfd2c8e3981f9ac9545d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIGSPHERE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384a79d68d1e7ce2544bcc02887372df84c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TORUS</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384ae7bbb858d6b41ad95de52f0347a57688</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>STP_Feature.hxx</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/STP-BV/</path>
    <filename>STP__Feature_8hxx</filename>
  </compound>
  <compound kind="file">
    <name>STP_SmallSphere.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/STP-BV/</path>
    <filename>STP__SmallSphere_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="STP__Feature_8h" name="STP_Feature.h" local="no" imported="no">sch/STP-BV/STP_Feature.h</includes>
    <class kind="class">sch::STP_SmallSphere</class>
    <namespace>sch</namespace>
  </compound>
  <compound kind="file">
    <name>STP_Torus.h</name>
    <path>/home/runner/work/sch-core/sch-core/include/sch/STP-BV/</path>
    <filename>STP__Torus_8h</filename>
    <includes id="sch__api_8h" name="sch_api.h" local="no" imported="no">sch/sch_api.h</includes>
    <includes id="STP__Feature_8h" name="STP_Feature.h" local="no" imported="no">sch/STP-BV/STP_Feature.h</includes>
    <class kind="struct">sch::s_STP_Circle</class>
    <class kind="class">sch::STP_Torus</class>
    <namespace>sch</namespace>
    <member kind="typedef">
      <type>struct sch::s_STP_Circle</type>
      <name>STP_Circle</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ae46e0ff886e55423b0e240b172cf46bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>README.md</name>
    <path>/home/runner/work/sch-core/sch-core/</path>
    <filename>README_8md</filename>
  </compound>
  <compound kind="struct">
    <name>sch::_TimeStamp</name>
    <filename>structsch_1_1__TimeStamp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>adb2ad55283962f9acf93c39f69778bac</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>_TimeStamp</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>aace0ed8ef64da94c7debb15979b0eebb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>a8a0839332be442f6f2e53bcac87eda32</anchor>
      <arglist>(const _TimeStamp &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>a7f9ca8f4a5fd5893b846b25d343338ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>a5a1a07f0895e9a9f6cccbee4a8dd0c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned long int</type>
      <name>value1</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>adb851331e8cd34b001684d59a9f08a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long int</type>
      <name>value2</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>ac5ad22ff98bbbd3058b5b36650a39bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long int</type>
      <name>value3</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>a1f135735b8f813b6f4c017c6c321fc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long int</type>
      <name>value4</name>
      <anchorfile>structsch_1_1__TimeStamp.html</anchorfile>
      <anchor>a3cf101f3f996e86f63236bf84e9e3cc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_pointer_type::abstract</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1abstract.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const basic_pointer_oserializer *</type>
      <name>register_type</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1abstract.html</anchorfile>
      <anchor>a2c8600cf3118e78496d2ece0d65d510b</anchor>
      <arglist>(Archive &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::CD_Depth</name>
    <filename>classsch_1_1CD__Depth.html</filename>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Depth</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>a6874fe424498fa98d3437f16ca5cb08a</anchor>
      <arglist>(S_Object *Obj1, S_Object *Obj2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~CD_Depth</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>a3c5fbbb3903f5085e18984d14ce1b522</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setRelativePrecision</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>a4b6639d713e11cbab6fcff7c7b24065d</anchor>
      <arglist>(Scalar)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setEpsilon</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>a150efcb467327784458caaf3fd3664a8</anchor>
      <arglist>(Scalar)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getPenetrationDepth</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>a9301de3821172d3a601a0a1242fb8f79</anchor>
      <arglist>(Vector3 &amp;v, Point3 &amp;p1, Point3 &amp;p2, const CD_SimplexEnhanced &amp;s, const CD_Simplex &amp;s1_, const CD_Simplex &amp;s2_)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_Object *</type>
      <name>sObj1_</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>ada6f2292c936b0aef43e51033b75a6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_Object *</type>
      <name>sObj2_</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>a76e928b9996fff04b8d1e464ad57b5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>precision_</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>a95fdfc3e9a303d32429695acc105f8a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>epsilon_</name>
      <anchorfile>classsch_1_1CD__Depth.html</anchorfile>
      <anchor>aeb8a7fd7ead353af2fad8271d830f55a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::CD_Pair</name>
    <filename>classsch_1_1CD__Pair.html</filename>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Pair</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a51bae544164fcade563e4408259285b2</anchor>
      <arglist>(S_Object *Obj1, S_Object *Obj2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~CD_Pair</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a621ec61b50184e631fd48f8dea620cac</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getClosestPoints</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>adc3e58868da3f623f42e1c74b2ca47a9</anchor>
      <arglist>(Point3 &amp;p1, Point3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>reComputeClosestPoints</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>ae4df31d3c1959d7a952aae8fdccad5d9</anchor>
      <arglist>(Point3 &amp;p1, Point3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getDistance</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a393c0bafa00d23201c8b03e683835b15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getDistanceWithoutPenetrationDepth</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>aac6d390af7d244c617942080bf4e15c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API bool</type>
      <name>isInCollision</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>ac69524f4a85c188a2986638aa7eeb71c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setVector</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a3ab1aa2bfa738bf1ff2a008f9860f73c</anchor>
      <arglist>(const Vector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setRelativePrecision</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a261bf27865bbe12facf5a7fabbfebeb6</anchor>
      <arglist>(Scalar precision)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setEpsilon</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>ad4cbbeb1b75ce2624121f655523e0954</anchor>
      <arglist>(Scalar)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API S_Object *</type>
      <name>operator[]</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a3549fc5639962774041d74f8639b0218</anchor>
      <arglist>(unsigned char i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Scalar</type>
      <name>GJK</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a2ddeeded589eba6c0b8814f258a04488</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Scalar</type>
      <name>penetrationDepth</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a186619fca4e55f991f8fe34b613e2494</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>witPoints</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a47a2d62822dfc2c17dc51f821fd6e6a7</anchor>
      <arglist>(Point3 &amp;p1, Point3 &amp;p2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_Object *</type>
      <name>sObj1_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a7230c18a039a7c4545cbda0cebefd5af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_Object *</type>
      <name>sObj2_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a495047acd3b32fc93b6f7978fb1a2c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>lastDirection_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a3323973165cc9e2ae7cac0ac129d91c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastFeature1_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a27ae34a166f6a9d02979d339799d4ce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>lastFeature2_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>aeb44935c3aecd6b54ea5f788a6601d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>p1_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a05ea76d65ef4534ee98d7d8bd5d67f7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>p2_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a5a85a1e772f5975d5b8a77bc2494fce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>distance_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a57aae688fd79fea9f72579b20bf082ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_ObjectTimeStamp</type>
      <name>stamp1_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>af56c4fdd5cbad9e64292a0065a5a8417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_ObjectTimeStamp</type>
      <name>stamp2_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a708d70a7e7afbe7c149833afff6916a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>precision_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a1dbaed6dcf22777a58cf45ab44e53732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>epsilon_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a73b2357cf933fb55cd8183a151d23a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>lambda0_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a3ce26b1b0caf33ae9f4a874ba9448371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>lambda1_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>af4a75e989fb44126afb33cd665f5c823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>lambda2_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a003c60ad128952441fff887913e0d6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>det_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>aa177e8ea83bd591017dd4707dd17eccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>projectionComputed_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a7ec3d81701472ce3e6bb3f72aedd7135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>collision_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a14df71709ba57a2a2e0bf70027d96133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>witPointsAreComputed_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a9d85f8d9792d189e2985541532074389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CD_Simplex</type>
      <name>s1_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>ae494ebccd5d6f36af085f091f00de567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CD_Simplex</type>
      <name>s2_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a8a95a4f129f0be1c494a303d085690d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CD_Simplex</type>
      <name>s_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a4f0a04c819d786707a80733aac4a73f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CD_SimplexEnhanced</type>
      <name>sp_</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>a6d0c463b6a49b48e43ff346b4a6a46bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CD_Depth</type>
      <name>depthPair</name>
      <anchorfile>classsch_1_1CD__Pair.html</anchorfile>
      <anchor>acc762bd59738fad430b68f82b38c8c59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::CD_Scene</name>
    <filename>classsch_1_1CD__Scene.html</filename>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Scene</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a794d41ecaf8db30173fefb82bfa27184</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~CD_Scene</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>af75eccc09116bd4e62cc6efcc3e56c5d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API int</type>
      <name>addObject</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a6aab4c2e27526628f323c6200ac8d63f</anchor>
      <arglist>(S_Object *O)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>withdrawObject</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>aaf6e0140b831ddaf5bf1798ba9556b53</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>ignorePair</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a9fb17fb4127708212803d040dc4bf620</anchor>
      <arglist>(int a, int b)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>considerPair</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a6c7d58efdded4754b1a86d489530fbd6</anchor>
      <arglist>(int a, int b)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_Pair *</type>
      <name>operator()</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a298ac0b9f5096b040fac16fb032299d6</anchor>
      <arglist>(int a, int b) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API int</type>
      <name>sceneProximityQuery</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a17724af6be9b4f49faaa53789f9b2fa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API S_Object *</type>
      <name>operator[]</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a7e4cd5b72d75ebda804b8b1e3d6b7097</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API size_t</type>
      <name>size</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>ab9e73b4fefd7c2afa43c2f4e59029812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getWitnessPoints</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a97152e3891b9bce8789bf4d25e4b0609</anchor>
      <arglist>(int a, int b, Point3 &amp;p1, Point3 &amp;p2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; S_Object * &gt;</type>
      <name>objects_</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a169aa56e87a751b792777b4acf39411c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; CD_Pair * &gt; &gt;</type>
      <name>pairs_</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a6959134ab5b1a57b58876bdfae93307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; Point3 &gt; &gt;</type>
      <name>witness_</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a71b22fb2901fae34caf3f9a76b478e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; Scalar &gt; &gt;</type>
      <name>distances_</name>
      <anchorfile>classsch_1_1CD__Scene.html</anchorfile>
      <anchor>a67f4b2ce652c19500e85d09db577160e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::CD_Simplex</name>
    <filename>classsch_1_1CD__Simplex.html</filename>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Simplex</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a2aa242e4bbe2c912730e5e8425db337e</anchor>
      <arglist>(const CD_Simplex &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Simplex</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ab9297e756491968d2c8216e369c1339c</anchor>
      <arglist>(const Point3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Simplex</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a3825945e9842c44f931f522519d73c71</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Simplex</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ae540e77e79cae28d6b2f9e50fd88f8f8</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, const Point3 &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_Simplex</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>aebaba3bc2bd38b5b7a2db49a068cd878</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, const Point3 &amp;p3, const Point3 &amp;p4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~CD_Simplex</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a150cf2791dbbe0e1b60a022999a5145a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_SimplexType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a3aa4bacf1f07b0fc8375e89e61b07aad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Point3 &amp;</type>
      <name>operator[]</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a8460ad8efee73885d0642d8d62a43cde</anchor>
      <arglist>(unsigned char) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Point3 &amp;</type>
      <name>operator[]</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a928233c5f1f1cea3316b9413082e3e88</anchor>
      <arglist>(unsigned char)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_Simplex &amp;</type>
      <name>operator=</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>af76ed7038a460b6b0b019b03c7495d90</anchor>
      <arglist>(const CD_Simplex &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_Simplex &amp;</type>
      <name>operator=</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>af392d805ad38291ca39a6e30ad0dd023</anchor>
      <arglist>(const Point3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API bool</type>
      <name>operator==</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a55d2c153ba56fd7b6469801f28422279</anchor>
      <arglist>(const CD_Simplex &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API bool</type>
      <name>operator!=</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a0f6033cdf7af4715d8d86103b1c0ae60</anchor>
      <arglist>(const CD_Simplex &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_Simplex &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a33d659c86464ab82982b7bc167d9da83</anchor>
      <arglist>(const Point3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_Simplex</type>
      <name>operator+</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a9d5be47e482257e475a19fdfdb9ced85</anchor>
      <arglist>(const Point3 &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>filter</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a4abb630fa8c0284cab4110d0d1b281df</anchor>
      <arglist>(const CD_SimplexKeptPoints &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>squareDistanceAtOrigin</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a9b8f473a30232eecd473e1ed26b85450</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>updateVectors</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ac8fc0c98be8985bf8929237168d111c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Vector3 &amp;</type>
      <name>AB</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a6aaf2c7c7aa5e0a791aef307836d8187</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Vector3 &amp;</type>
      <name>AC</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ac262b42ba79ced20a599fd32b5db1de8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Vector3 &amp;</type>
      <name>AD</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ae4027955e2ea43b2852bb5d045215944</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CD_SimplexType</type>
      <name>type_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a099873869fbf89112ff3be19b743123d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>s1_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a50b81d47ad20c6aece77bf266b6c41db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>s2_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a5ba79309e1002a4fa295d090bf2a6d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>s3_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a7633558f268668f1b3c9f7393d27bc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>s4_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a76350e95fb03cd77ca2e4ac50badf9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>ab_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ab94cfad038d7a76c3e62e54612aa3097</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>ac_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a87959d3125ac180fd2d8210d3a360a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>ad_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a5531ca341d4038bbf8b8fd02914f5f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Scalar</type>
      <name>zero_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ab85fd3268df0acdff39224d3807fbdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Scalar</type>
      <name>zero2_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a0135a6dfb54e3cb12fe9a854cdbb2cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Scalar</type>
      <name>zero3_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>a21f160797d7f93460d977a5b00d4b052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const Scalar</type>
      <name>zero4_</name>
      <anchorfile>classsch_1_1CD__Simplex.html</anchorfile>
      <anchor>ab208fdb381cd710f93012e0ecf6ac98f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::CD_SimplexEnhanced</name>
    <filename>classsch_1_1CD__SimplexEnhanced.html</filename>
    <base>sch::CD_Simplex</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a952e80246682b7bcdcd62dc191b890fd</anchor>
      <arglist>(const CD_SimplexEnhanced &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>aedd67f2bf9daaccd03e29e824d210f48</anchor>
      <arglist>(const Point3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a2b457991211628cd593d2d9093dfa501</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a3c110da62d0fd07c6907ea5adab48b07</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, const Point3 &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a0b9314ab1f881814ab057533550823c8</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, const Point3 &amp;p3, const Point3 &amp;p4)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a93ea44d723146a2ea182a222538127b9</anchor>
      <arglist>(const Point3 &amp;p, Scalar norm)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a4a5b8da49e6bbf86acfe51cf8ce5d8f0</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, Scalar norm1, Scalar norm2)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a0756e9372365ea3d25ffe33a7eed6ab5</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, const Point3 &amp;p3, Scalar norm1, Scalar norm2, Scalar norm3)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>ad7739d83a7c6e213e48aec216258904b</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, const Point3 &amp;p3, const Point3 &amp;p4, Scalar norm1, Scalar norm2, Scalar norm3, Scalar norm4)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~CD_SimplexEnhanced</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a802bfe84dd6c2b54b52b3c0f843b3737</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>filter</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a765f3b81ae70e5c9c316dd819a1c7453</anchor>
      <arglist>(const CD_SimplexKeptPoints &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>norms</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a73fbe131a368041fb504ef638b76fc56</anchor>
      <arglist>(const char i) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar &amp;</type>
      <name>norms</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a17a9b17a253a6e0db9e3a9a8650045dd</anchor>
      <arglist>(const char i)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_SimplexEnhanced &amp;</type>
      <name>operator=</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a64ef44b3d2975a2121be7620c148bb5d</anchor>
      <arglist>(const CD_SimplexEnhanced &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_SimplexEnhanced &amp;</type>
      <name>operator+=</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>aed6abc7fa1db3542147979680c5969e3</anchor>
      <arglist>(const Point3 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API CD_SimplexEnhanced</type>
      <name>operator+</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a28aec8d76568e542aa44bd04faf260d6</anchor>
      <arglist>(const Point3 &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>farthestPointDistance</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>ae318e569d9c6ab1f0919585df97518a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>getClosestSubSimplexGJK</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>af6fd1a8235def825b4a63765b17a361d</anchor>
      <arglist>(CD_SimplexKeptPoints &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API bool</type>
      <name>isAffinelyDependent</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>abd8810013e32da2de2ba2bad0a0ca009</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>norm1_</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a257087569ada3b429215c0d802937f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>norm2_</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>ab1d6cccefc55a623002ad7c7d20b6de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>norm3_</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>a54a4e4bd408718c81e32985cc12f75d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>norm4_</name>
      <anchorfile>classsch_1_1CD__SimplexEnhanced.html</anchorfile>
      <anchor>ad0bcc43053b37c13f65de60dd7a44562</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::CD_SimplexKeptPoints</name>
    <filename>structsch_1_1CD__SimplexKeptPoints.html</filename>
    <member kind="function">
      <type></type>
      <name>CD_SimplexKeptPoints</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>a3195f3a48c27bad234756de753aceb53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char &amp;</type>
      <name>operator[]</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>a25a4606131557587ab6d189f8b88b055</anchor>
      <arglist>(unsigned char i)</arglist>
    </member>
    <member kind="function">
      <type>const char &amp;</type>
      <name>operator[]</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>ada707e9450afbe8acce1320e30cd8a6a</anchor>
      <arglist>(unsigned char i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>a7e2e478a2f5459b4522d03b88c12c506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>b1</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>acf5cec3715b997ac6a16320527ca89b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>b2</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>a002b48706ced2c2d24de628768aba606</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>b3</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>a7360485de663c73bd3445d35a8832353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>b4</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>a70a1fa6bca1495fbff6f3ea034561bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CD_SimplexType</type>
      <name>type</name>
      <anchorfile>structsch_1_1CD__SimplexKeptPoints.html</anchorfile>
      <anchor>a0d27dc8c1dc23668d266bc6854b99d61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::check_tracking</name>
    <filename>structboost_1_1archive_1_1check__tracking.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>BOOST_DEDUCED_TYPENAME mpl::if_&lt; BOOST_DEDUCED_TYPENAME mpl::equal_to&lt; serialization::tracking_level&lt; T &gt;, mpl::int_&lt; serialization::track_never &gt; &gt;, mpl::not_&lt; is_pointer&lt; T &gt; &gt;, is_const&lt; T &gt; &gt;::type</type>
      <name>typex</name>
      <anchorfile>structboost_1_1archive_1_1check__tracking.html</anchorfile>
      <anchor>ae57f7ff0592682ff59fa3bdb834e2e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_CONSTANT</name>
      <anchorfile>structboost_1_1archive_1_1check__tracking.html</anchorfile>
      <anchor>a3fbf2e27a4c25ba06503e315950c3d32</anchor>
      <arglist>(bool, value=typex::value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::Geometry</name>
    <filename>structsch_1_1Geometry.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>GeometryType</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a589fcbf549a272b3a643c861b284d27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINE</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a589fcbf549a272b3a643c861b284d27fabe288e7d70f85b03294c55acc2334c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIANGLE</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a589fcbf549a272b3a643c861b284d27fadd1e08daf47adcd4df479bd6024c9725</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPHERE</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a589fcbf549a272b3a643c861b284d27fa3468eb13f16a05aece1fd189e438fae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LINE</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a589fcbf549a272b3a643c861b284d27fabe288e7d70f85b03294c55acc2334c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TRIANGLE</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a589fcbf549a272b3a643c861b284d27fadd1e08daf47adcd4df479bd6024c9725</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPHERE</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a589fcbf549a272b3a643c861b284d27fa3468eb13f16a05aece1fd189e438fae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a9f5137e8a1732a8f6c1ae2315260d87b</anchor>
      <arglist>(GeometryType t)</arglist>
    </member>
    <member kind="variable">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a2f403bf5541dc10d1428ba7b85cbbb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>color</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>acc2bad5325eb8c907a931004320bc953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>radius</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a376eb83f7897d7ae15df7cb1275d86ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>center</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>ad1657e1aa61e080359d0fb38bf233498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3x3</type>
      <name>rotation</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a07a939c19e9feeb7c077d5d1dc87ea5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Vector3 &gt;</type>
      <name>vertex</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a46893800af1338b718d2e014389bd39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Vector3 &gt;</type>
      <name>normal</name>
      <anchorfile>structsch_1_1Geometry.html</anchorfile>
      <anchor>a28909c0e3214c670f66612b61e6673bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GJK</name>
    <filename>classGJK.html</filename>
    <member kind="function">
      <type>SCH_API</type>
      <name>GJK</name>
      <anchorfile>classGJK.html</anchorfile>
      <anchor>a65c29054e9f3ec5cbeead6a75a419d2c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~GJK</name>
      <anchorfile>classGJK.html</anchorfile>
      <anchor>a88b4e67cc682e0b9a946051fdfc5076b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API Point3</type>
      <name>Support1</name>
      <anchorfile>classGJK.html</anchorfile>
      <anchor>a2920b6bae264adb98d3071ada25d9f80</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API Point3</type>
      <name>Support2</name>
      <anchorfile>classGJK.html</anchorfile>
      <anchor>a60da6abf412b73da195235897e6847d9</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>Compute</name>
      <anchorfile>classGJK.html</anchorfile>
      <anchor>a102597eabb4aef90ce946c9aa072a80f</anchor>
      <arglist>(Point3 &amp;p1, Point3 &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CD_Matrix::Matrix3x3T</name>
    <filename>structCD__Matrix_1_1Matrix3x3T.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a98dd6acd98e137dc434d9337e06b999b</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a95bcc3d88e72231d008ceba3e2c8a954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>acdaa13137c0b4dd50b6bcb43c58fffa9</anchor>
      <arglist>(const T *const x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aef515d1bd9c06faaf129ddca717f9a02</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a5fd7647cd5369d98a425a2d28c1ee60d</anchor>
      <arglist>(const T x0, const T x1, const T x2, const T x3, const T x4, const T x5, const T x6, const T x7, const T x8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ae4ed5f2194053d7a6e54800960ad6074</anchor>
      <arglist>(const struct Matrix3x3T&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a7d76f79b56e0786ee9926d0b115ef4ec</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a47921a3391eff28199dbffdc0bc86e64</anchor>
      <arglist>(const struct Matrix3x3T&lt; T2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a62156879ae7c01502e724d1a7df1907b</anchor>
      <arglist>(const Vector3T&lt; T, b &gt; V1, const Vector3T&lt; T, b &gt; V2, const Vector3T&lt; T, b &gt; V3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a4d055d94158eb340232d054db9f1f3a5</anchor>
      <arglist>(const QuaternionT&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a9d6e5635154ddf4475262617a50a6963</anchor>
      <arglist>(const T &amp;q0, const T &amp;q1, const T &amp;q2, const T &amp;q3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aee292ccd2b9feb3d5e1d1089dc45de1f</anchor>
      <arglist>(const T &amp;angle, const Vector3T&lt; T, b &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>adc4c5edb70e45fcd21f00cfecb5670a0</anchor>
      <arglist>(const T &amp;roll, const T &amp;pitch, const T &amp;yaw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a06669a3fe6415816f237de305531d071</anchor>
      <arglist>(const T x0, const T x1, const T x2, const T x3, const T x4, const T x5, const T x6, const T x7, const T x8)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a86789e9d96bbc0ca75043badfc703dcd</anchor>
      <arglist>(const T &amp;angle, const Vector3T&lt; T, b &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a32de43567bb6418793560c467549f9ed</anchor>
      <arglist>(const T *const x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a77678b088fc12daea88c3a77161805bc</anchor>
      <arglist>(const QuaternionT&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a897138f72224a1df9ac8326a896ad28a</anchor>
      <arglist>(const T &amp;q0, const T &amp;q1, const T &amp;q2, const T &amp;q3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a4f7a2395f33ec075fee9d6db6baf4b49</anchor>
      <arglist>(const T &amp;yaw, const T &amp;pitch, const T &amp;roll)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a3b6ad6e8166b21779a2c9423c07a3115</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ace26a8faca64de9a3dad1bbf836795da</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a0e392ea857a6aff94dc9c4a9051cec8a</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ab1bc001695f0e2190a2e48d55f50408b</anchor>
      <arglist>(unsigned int i, unsigned int j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6964f08a6f26dbde4b4620c76cbc855e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ae8898eedd9deb25efc01d5730a51ec66</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a05e26de6872e91d3599227839fd01522</anchor>
      <arglist>(const struct Matrix3x3T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>struct Matrix3x3T&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ae2b4dd4fabd8d47dbe639610a5bb1ec0</anchor>
      <arglist>(const struct Matrix3x3T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CeqthismulB</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6bbfb3e65defb05dc7dc467b9c5a37d5</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;B, Matrix3x3T&lt; T &gt; &amp;C) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>acc4f543c22b832395e08bfe71c4edee6</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T&lt; T, b &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a7bc72b362243445559e5355e013dc525</anchor>
      <arglist>(const Vector3T&lt; T, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CeqthismulB</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a2b3c22ea55b531227dc866c98247449f</anchor>
      <arglist>(Vector3T&lt; T, b &gt; &amp;B, Vector3T&lt; T, b &gt; &amp;C) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; T &gt; &amp;</type>
      <name>TransposeIt</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a82799234e8f3f2663c2442275e4cd95c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; T &gt;</type>
      <name>Transpose</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aa1ad241cbdb7235dd2d483c3e09ce367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transpose</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6f511d59a710e8b0e2aa63d0bafb4808</anchor>
      <arglist>(Matrix3x3T&lt; T &gt; &amp;A) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inversion</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aebd665aec9347f06f3c01768de06fa1a</anchor>
      <arglist>(struct Matrix3x3T&lt; T &gt; &amp;A) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a8b8f4b18b9a893e60c1f6f5bdf213306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fill</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a981a0a5f6fc29b9867ba90d1bdee2367</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIdentity</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6bc10e12ba4ab01bfc24658e734ca5b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a0d8eab6ed0cde4aa30d03fdcec0b5592</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>adbb52deae8f3579760f5f5b873ca06ae</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a3d05520ba6ff82e2b34380f630107e50</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;B) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a8a1353b9536835002d6809bfd8e7cbbc</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a2718109086f9f3f0956c55505abb46df</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a991480101e9b5111938fcc4a52d20e2b</anchor>
      <arglist>[9]</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a9904f15dec6e1e0d1d954741f6d22578</anchor>
      <arglist>(std::ostream &amp;os, Matrix3x3T&lt; T &gt; const &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix3x3T&lt; Scalar &gt;</name>
    <filename>structCD__Matrix_1_1Matrix3x3T.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a98dd6acd98e137dc434d9337e06b999b</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a95bcc3d88e72231d008ceba3e2c8a954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>acdaa13137c0b4dd50b6bcb43c58fffa9</anchor>
      <arglist>(const Scalar *const x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aef515d1bd9c06faaf129ddca717f9a02</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a5fd7647cd5369d98a425a2d28c1ee60d</anchor>
      <arglist>(const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4, const Scalar x5, const Scalar x6, const Scalar x7, const Scalar x8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ae4ed5f2194053d7a6e54800960ad6074</anchor>
      <arglist>(const struct Matrix3x3T&lt; Scalar &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a47921a3391eff28199dbffdc0bc86e64</anchor>
      <arglist>(const struct Matrix3x3T&lt; T2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a62156879ae7c01502e724d1a7df1907b</anchor>
      <arglist>(const Vector3T&lt; Scalar, b &gt; V1, const Vector3T&lt; Scalar, b &gt; V2, const Vector3T&lt; Scalar, b &gt; V3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a4d055d94158eb340232d054db9f1f3a5</anchor>
      <arglist>(const QuaternionT&lt; Scalar &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a9d6e5635154ddf4475262617a50a6963</anchor>
      <arglist>(const Scalar &amp;q0, const Scalar &amp;q1, const Scalar &amp;q2, const Scalar &amp;q3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aee292ccd2b9feb3d5e1d1089dc45de1f</anchor>
      <arglist>(const Scalar &amp;angle, const Vector3T&lt; Scalar, b &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix3x3T</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>adc4c5edb70e45fcd21f00cfecb5670a0</anchor>
      <arglist>(const Scalar &amp;roll, const Scalar &amp;pitch, const Scalar &amp;yaw)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; Scalar &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a7d76f79b56e0786ee9926d0b115ef4ec</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a06669a3fe6415816f237de305531d071</anchor>
      <arglist>(const Scalar x0, const Scalar x1, const Scalar x2, const Scalar x3, const Scalar x4, const Scalar x5, const Scalar x6, const Scalar x7, const Scalar x8)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a86789e9d96bbc0ca75043badfc703dcd</anchor>
      <arglist>(const Scalar &amp;angle, const Vector3T&lt; Scalar, b &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a32de43567bb6418793560c467549f9ed</anchor>
      <arglist>(const Scalar *const x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a77678b088fc12daea88c3a77161805bc</anchor>
      <arglist>(const QuaternionT&lt; Scalar &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a897138f72224a1df9ac8326a896ad28a</anchor>
      <arglist>(const Scalar &amp;q0, const Scalar &amp;q1, const Scalar &amp;q2, const Scalar &amp;q3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a4f7a2395f33ec075fee9d6db6baf4b49</anchor>
      <arglist>(const Scalar &amp;yaw, const Scalar &amp;pitch, const Scalar &amp;roll)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a3b6ad6e8166b21779a2c9423c07a3115</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ace26a8faca64de9a3dad1bbf836795da</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a0e392ea857a6aff94dc9c4a9051cec8a</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ab1bc001695f0e2190a2e48d55f50408b</anchor>
      <arglist>(unsigned int i, unsigned int j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6964f08a6f26dbde4b4620c76cbc855e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ae8898eedd9deb25efc01d5730a51ec66</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; Scalar &gt;</type>
      <name>operator+</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a05e26de6872e91d3599227839fd01522</anchor>
      <arglist>(const struct Matrix3x3T&lt; Scalar &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>struct Matrix3x3T&lt; Scalar &gt;</type>
      <name>operator-</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>ae2b4dd4fabd8d47dbe639610a5bb1ec0</anchor>
      <arglist>(const struct Matrix3x3T&lt; Scalar &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CeqthismulB</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6bbfb3e65defb05dc7dc467b9c5a37d5</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; &amp;B, Matrix3x3T&lt; Scalar &gt; &amp;C) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CeqthismulB</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a2b3c22ea55b531227dc866c98247449f</anchor>
      <arglist>(Vector3T&lt; Scalar, b &gt; &amp;B, Vector3T&lt; Scalar, b &gt; &amp;C) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; Scalar &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>acc4f543c22b832395e08bfe71c4edee6</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T&lt; Scalar, b &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a7bc72b362243445559e5355e013dc525</anchor>
      <arglist>(const Vector3T&lt; Scalar, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; Scalar &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a3d05520ba6ff82e2b34380f630107e50</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; &amp;B) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; Scalar &gt; &amp;</type>
      <name>TransposeIt</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a82799234e8f3f2663c2442275e4cd95c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3x3T&lt; Scalar &gt;</type>
      <name>Transpose</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aa1ad241cbdb7235dd2d483c3e09ce367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Transpose</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6f511d59a710e8b0e2aa63d0bafb4808</anchor>
      <arglist>(Matrix3x3T&lt; Scalar &gt; &amp;A) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inversion</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>aebd665aec9347f06f3c01768de06fa1a</anchor>
      <arglist>(struct Matrix3x3T&lt; Scalar &gt; &amp;A) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a8b8f4b18b9a893e60c1f6f5bdf213306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Fill</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a981a0a5f6fc29b9867ba90d1bdee2367</anchor>
      <arglist>(Scalar value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsIdentity</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a6bc10e12ba4ab01bfc24658e734ca5b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a0d8eab6ed0cde4aa30d03fdcec0b5592</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>adbb52deae8f3579760f5f5b873ca06ae</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a8a1353b9536835002d6809bfd8e7cbbc</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a2718109086f9f3f0956c55505abb46df</anchor>
      <arglist>(const Scalar &amp;t)</arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a991480101e9b5111938fcc4a52d20e2b</anchor>
      <arglist>[9]</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structCD__Matrix_1_1Matrix3x3T.html</anchorfile>
      <anchor>a9904f15dec6e1e0d1d954741f6d22578</anchor>
      <arglist>(std::ostream &amp;os, Matrix3x3T&lt; Scalar &gt; const &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CD_Matrix::Matrix4x4T</name>
    <filename>structCD__Matrix_1_1Matrix4x4T.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Matrix4x4T</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a90d12844e680bfb860a9be51b0980515</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix4x4T</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a6e6cc2047b36fc123075a799a8cc2065</anchor>
      <arglist>(const T x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix4x4T</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a85d8eab1ef606c24fde3c915d011d70b</anchor>
      <arglist>(const struct Matrix4x4T&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix4x4T</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>afe2dc633835cc9c04f439b8678360b6f</anchor>
      <arglist>(const struct Matrix4x4T&lt; T2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>aed297df0657001416c1a7b1a4740575b</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>ae615eb9e4f2a5df2d31d617f274eebba</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a4f067db3f7b46bebf88a39278449f28b</anchor>
      <arglist>(unsigned int i, unsigned int j)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>adff8aa5ac27d619bce85ce4c0291f0ca</anchor>
      <arglist>(unsigned int i, unsigned int j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a9a0b7d3add1d5d9ee60be419d220d684</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a9a27a2603382c8ecea0ddbb5742acb61</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4T&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>ad7035e7d5be6029d851c81123a91e3b1</anchor>
      <arglist>(const Matrix4x4T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>struct Matrix4x4T&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a08d8d846aab85146d76761c9a01753d5</anchor>
      <arglist>(const struct Matrix4x4T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4T&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a8a2960b7b0ac15ed628398abc4a7a7a8</anchor>
      <arglist>(const Matrix4x4T&lt; T &gt; &amp;B) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CeqthismulB</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a62e332d864e274ddf27adabeefe1d6bc</anchor>
      <arglist>(const Matrix4x4T&lt; T &gt; &amp;B, Matrix4x4T&lt; T &gt; &amp;C) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CeqthismulB</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a302566455a429dad38f6d25f0742001a</anchor>
      <arglist>(const Vector4T&lt; T &gt; &amp;B, Vector4T&lt; T &gt; &amp;C) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T&lt; T, b &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a4176d7660f94a73df13921e1baf212fe</anchor>
      <arglist>(const Vector3T&lt; T, b &gt; &amp;B) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4T&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a032bb863a6ad7dc0d269b2840825cf78</anchor>
      <arglist>(const double &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4T&lt; T &gt;</type>
      <name>Transpose</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a8097ce6ea468aafc77c774dd0383635c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Inversion</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a5151e6f1c602369b90310a772c8c7cd1</anchor>
      <arglist>(Matrix4x4T &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix4x4T&lt; T &gt;</type>
      <name>Inversion</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a6c1cc2505235f5827d92ddd1c0f8fb79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a2f19095990288b2176bda7cb4825bbba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a3d878f014088d402aba3ce0c2d02c95f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>ae52a29ceaa61c165997dcddbc5f48d5d</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a930e2b3c243d41be64e08b49a00444ba</anchor>
      <arglist>(const Matrix4x4T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a99e42c8dc545bbef06b3bd292e666c48</anchor>
      <arglist>(const Matrix4x4T&lt; T &gt; &amp;B)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>aee1bbfc88383c98a002e1c972f69e8d1</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structCD__Matrix_1_1Matrix4x4T.html</anchorfile>
      <anchor>a1ee843ea66f83f91391e5f24ed1fce6e</anchor>
      <arglist>(std::ostream &amp;os, Matrix4x4T&lt; T &gt; const &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_pointer_type::non_abstract</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1non__abstract.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const basic_pointer_oserializer *</type>
      <name>register_type</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1non__abstract.html</anchorfile>
      <anchor>a28ea1d7cec31095aa7b171174ea5377a</anchor>
      <arglist>(Archive &amp;ar)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_pointer_type::non_polymorphic</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1non__polymorphic.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1non__polymorphic.html</anchorfile>
      <anchor>ad199c40eb31711be12622b2371b01e44</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t, const basic_pointer_oserializer *bpos_ptr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CD_Matrix::Norm</name>
    <filename>structCD__Matrix_1_1Norm.html</filename>
    <templarg>T</templarg>
    <templarg>normOptimization</templarg>
    <member kind="function">
      <type></type>
      <name>Norm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a01cda2301ffb89e0e493e215b3cfd40b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a9c00278fcc9658efd5da47a3ed35c4ae</anchor>
      <arglist>(const T &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outdateNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>ae62abb3d7364736d0746c06dcc205cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>normOutdated</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a2303fac58e5f0373080335b3e140f7ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a6cb64bd7ac23c0a5ce2ec087505a90f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>norm_</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>af3b449dace09078a2ef31a8c1e070d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>normOutdated_</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a3494051f778e2953510da9fa4a3acc69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Norm&lt; Scalar, normOptimization &gt;</name>
    <filename>structCD__Matrix_1_1Norm.html</filename>
    <member kind="function">
      <type></type>
      <name>Norm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a01cda2301ffb89e0e493e215b3cfd40b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a9c00278fcc9658efd5da47a3ed35c4ae</anchor>
      <arglist>(const Scalar &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outdateNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>ae62abb3d7364736d0746c06dcc205cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>normOutdated</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a2303fac58e5f0373080335b3e140f7ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>getNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a6cb64bd7ac23c0a5ce2ec087505a90f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>norm_</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>af3b449dace09078a2ef31a8c1e070d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>normOutdated_</name>
      <anchorfile>structCD__Matrix_1_1Norm.html</anchorfile>
      <anchor>a3494051f778e2953510da9fa4a3acc69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CD_Matrix::Norm&lt; T, false &gt;</name>
    <filename>structCD__Matrix_1_1Norm_3_01T_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>setNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>a5a294baed42169393061e0057ba19563</anchor>
      <arglist>(const T &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>ae89d7714f5a591c7f6493cb64e64c61e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outdateNorm</name>
      <anchorfile>structCD__Matrix_1_1Norm_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>ac82819864af9c653df86d665ab387bbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>normOutdated</name>
      <anchorfile>structCD__Matrix_1_1Norm_3_01T_00_01false_01_4.html</anchorfile>
      <anchor>adc3a482f3e98674d0d0677a53b6f43b2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::archive::detail::oserializer</name>
    <filename>classboost_1_1archive_1_1detail_1_1oserializer.html</filename>
    <templarg>Archive</templarg>
    <templarg>T</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual BOOST_DLLEXPORT void</type>
      <name>save_object_data</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1oserializer.html</anchorfile>
      <anchor>acd11e5b93e486e458089523b70522777</anchor>
      <arglist>(basic_oarchive &amp;ar, const void *x) const BOOST_USED</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>class_info</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1oserializer.html</anchorfile>
      <anchor>a9682cb3ba8af87e6a86219ef979f38d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>tracking</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1oserializer.html</anchorfile>
      <anchor>af277ac4d1d84b4f839f2a3b064d8992e</anchor>
      <arglist>(const unsigned int) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>version</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1oserializer.html</anchorfile>
      <anchor>a153837898313c9c507c7421125211970</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_polymorphic</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1oserializer.html</anchorfile>
      <anchor>af3821917a3eed8fe4e66c23c89fc563b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~oserializer</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1oserializer.html</anchorfile>
      <anchor>a6aaf075f2ecdb21b9782312ae4718fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static oserializer &amp;</type>
      <name>instantiate</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1oserializer.html</anchorfile>
      <anchor>ac4f345f575cde7418d2c48e8067283a8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::archive::detail::pointer_oserializer</name>
    <filename>classboost_1_1archive_1_1detail_1_1pointer__oserializer.html</filename>
    <templarg>T</templarg>
    <templarg>Archive</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~pointer_oserializer</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1pointer__oserializer.html</anchorfile>
      <anchor>a067adf63dcaca806e87f0ec2f957c692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BOOST_DLLEXPORT const pointer_oserializer &amp;</type>
      <name>instantiate</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1pointer__oserializer.html</anchorfile>
      <anchor>ae4180f7913b802368369a199d4bb1689</anchor>
      <arglist>() BOOST_USED</arglist>
    </member>
    <member kind="variable">
      <type>void(*const</type>
      <name>m</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1pointer__oserializer.html</anchorfile>
      <anchor>a8771feb00bbd744758ae29e90c18c681</anchor>
      <arglist>)(Archive &amp;, T &amp;, const unsigned)</arglist>
    </member>
    <member kind="variable">
      <type>boost::serialization::extended_type_info *(*</type>
      <name>e</name>
      <anchorfile>classboost_1_1archive_1_1detail_1_1pointer__oserializer.html</anchorfile>
      <anchor>a650bb63bba4aba1c54500a0339ef7b59</anchor>
      <arglist>)()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::Polyhedron_algorithms</name>
    <filename>structsch_1_1Polyhedron__algorithms.html</filename>
    <member kind="function">
      <type>SCH_API</type>
      <name>Polyhedron_algorithms</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a5652c2d531019c959e14235b6ae8f589</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>Polyhedron_algorithms</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>aadc8b7e0e4ff590ce1dcf83040b90050</anchor>
      <arglist>(const Polyhedron_algorithms &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~Polyhedron_algorithms</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a9fae3a4c389f546cf4fc6fdfaeb6e291</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Polyhedron_algorithms &amp;</type>
      <name>operator=</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>af995d28a2fbc98fd9f7cd9f2dc4fd534</anchor>
      <arglist>(const Polyhedron_algorithms &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>updateFastArrays</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a3398a5b33545b903ff0d064fd973bb0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Point3</type>
      <name>naiveSupport</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>ac7bf24ed93d694096ef3ae89c49582fa</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>updateVertexNeighbors</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>ad6edd9bee4355c6c0e5d71957b7f31ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>clearNeighbors</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a6a1d6678db8cac12d13169566a985c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>clear</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>ab505f314612f943e2dd21b334c7c590e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>deleteVertexesWithoutNeighbors</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a2685831d7556365b4ad0466bdead90a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Point3</type>
      <name>support</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a693c21cd00484d21433862a4e911ba74</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>openFromFile</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a8ee7bb4a890a8c1a1a9b33acf195ae19</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>afd71094e0347b1810df7c4066fbd37c7</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; S_PolyhedronVertex * &gt;</type>
      <name>vertexes_</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>ac2cb717ec5e0c527be76d515c64ef397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; PolyhedronTriangle &gt;</type>
      <name>triangles_</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>aa67352db192d31663127df8500de1f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>S_PolyhedronVertex **</type>
      <name>fastVertexes_</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a4af7877df4daa150e2be4aab034f84da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>S_PolyhedronVertex **</type>
      <name>lastVertexes_</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a893b3ab22cad4db324f0a3d6e6a89377</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>numberOfVertices_</name>
      <anchorfile>structsch_1_1Polyhedron__algorithms.html</anchorfile>
      <anchor>a50435002cf65766b7f16bc5a445ae362</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::PolyhedronTriangle</name>
    <filename>structsch_1_1PolyhedronTriangle.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1PolyhedronTriangle.html</anchorfile>
      <anchor>aef14f415c600ea4e38a7c7372ff08b36</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>a</name>
      <anchorfile>structsch_1_1PolyhedronTriangle.html</anchorfile>
      <anchor>a816075aab5b905610a8b7770a13865a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>b</name>
      <anchorfile>structsch_1_1PolyhedronTriangle.html</anchorfile>
      <anchor>a0c264091669014b48326ef999c54ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>c</name>
      <anchorfile>structsch_1_1PolyhedronTriangle.html</anchorfile>
      <anchor>acb6f9b291668809e1a4617332bc10b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>normal</name>
      <anchorfile>structsch_1_1PolyhedronTriangle.html</anchorfile>
      <anchor>af62e6405741ccc540c5edf72808290b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_pointer_type::polymorphic</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1polymorphic.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type_1_1polymorphic.html</anchorfile>
      <anchor>a2d63c9fef5bd87169009ea4041336c20</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t, const basic_pointer_oserializer *bpos_ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CD_Matrix::QuaternionT</name>
    <filename>classCD__Matrix_1_1QuaternionT.html</filename>
    <templarg>T</templarg>
    <base protection="private">CD_Matrix::Vector4T</base>
    <member kind="function">
      <type></type>
      <name>QuaternionT</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a665fe512aa1e5246042626df1bf87c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternionT</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a869d68af4cdebce0e64f5e2905cea09d</anchor>
      <arglist>(const T &amp;x, const T &amp;y, const T &amp;z, const T &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuaternionT</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a3ba2c70d05f0ee75838b4715aa81d5d5</anchor>
      <arglist>(const Vector3T&lt; T, b &gt; &amp;axis, const T &amp;angle)</arglist>
    </member>
    <member kind="function">
      <type>const QuaternionT&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a3fbab6d7ee6b02732c55b36edb3899f7</anchor>
      <arglist>(const QuaternionT&lt; T &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionT&lt; T &gt;</type>
      <name>Conjugate</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a5ef05eb4b92cdc256052358367823767</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ConjugateIt</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a42680d1584acc58eab89e476082b7b60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>QuaternionT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a14f6f2c0c822b09a3a14922f0e06882c</anchor>
      <arglist>(const QuaternionT&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionT&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>afbce3dce5e780ef035375b374e8d5049</anchor>
      <arglist>(const QuaternionT&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~QuaternionT</name>
      <anchorfile>classCD__Matrix_1_1QuaternionT.html</anchorfile>
      <anchor>a6fd1d32146d98f52ca874882a3a1f587</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Box</name>
    <filename>classsch_1_1S__Box.html</filename>
    <base>sch::S_ObjectNonNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Box</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>a6ef0954117ae5568e0a84704555a85df</anchor>
      <arglist>(Scalar width, Scalar height, Scalar depth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_Box</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>a5ef4ded015dc202edd718b8164724f64</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Box *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>a8d97e61e8af8ff5674f0a152ac5a1a92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>a2f7c2a71a97782142685503965b3e77e</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>ab97ffc94d3b65f19a0c43774364cf261</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>getBoxParameters</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>a71bcd0e73d5d73c2ea50462c0781b21c</anchor>
      <arglist>(Scalar &amp;a, Scalar &amp;b, Scalar &amp;c) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>a_</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>a99e5b9b6186ff32f02783206a0ce75bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>b_</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>a0a2696fad83cf2f9bb8268e642b155a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>c_</name>
      <anchorfile>classsch_1_1S__Box.html</anchorfile>
      <anchor>aa87deb72616cbfdf08c76f80e841f94a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Capsule</name>
    <filename>classsch_1_1S__Capsule.html</filename>
    <base>sch::S_ObjectNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Capsule</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>ad464b3c1a0903f0c5d67fad63ebc6715</anchor>
      <arglist>(Point3 p1, Point3 p2, Scalar radius)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~S_Capsule</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a35cd7305cb2b3c2b0f23abf11b52db8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Capsule *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a4efb530e9994d7dbe89a34877e893d8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Point3 &amp;</type>
      <name>getP1</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a010a8ee5610bac57ef3e7f0b082ab6b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Point3 &amp;</type>
      <name>getP2</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a552dd6c5ca59cefd614e9df500988dff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getRadius</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>ae9ae157bbde47527f19fc2f66f9c9bd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a86cea08557d819376473969e083f23a2</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a81d1c731f0c731442de201646108e339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>p1_</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a702aa8590e1479f3873065c4d3315ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>p2_</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a355c7a61518e7638baa882edfb3c0f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>radius_</name>
      <anchorfile>classsch_1_1S__Capsule.html</anchorfile>
      <anchor>a1b9e478e3c5936b0502f6c052aa0cb75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Cone</name>
    <filename>classsch_1_1S__Cone.html</filename>
    <base>sch::S_ObjectNonNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Cone</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>afa326d2e06a393ee0bec58ea8944d001</anchor>
      <arglist>(const Scalar &amp;angle, const Scalar &amp;height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_Cone</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>a2f1e132fc9d8d8b7c2fa5287a2db07d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Cone *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>aff3137d55844f3ac7c13e11fd396b34f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>acbfa8c6dbe364cd2fe7f1a3fe4e9c00f</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>a92944c58b07e80186719bb62fcc6b76a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Scalar</type>
      <name>getAngle</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>aea1308922354279301e94e5294ac7cfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Scalar</type>
      <name>getHeight</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>a5eed04706bdb5c77f9b9bb181f149bc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>angle_</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>a4d3a032572090e0a8749bb9658c58802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>height_</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>ae474bbbcae28dcd0b9dfcd171cbaa268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>angleTan_</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>a30b84384e13d7ef09ed2a08bc613eaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>baseRadius_</name>
      <anchorfile>classsch_1_1S__Cone.html</anchorfile>
      <anchor>ad1052d4d695ece3614260692ee55316d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Cylinder</name>
    <filename>classsch_1_1S__Cylinder.html</filename>
    <base>sch::S_ObjectNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Cylinder</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a7c4f108702249197de9077449c0e9106</anchor>
      <arglist>(Point3 p1, Point3 p2, Scalar radius)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~S_Cylinder</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>aeebeb2f8f079000975582b1eebbfcfad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Cylinder *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>aab20a73b495fa4185b851d4240977ed4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Point3 &amp;</type>
      <name>getP1</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a46369b2dacf1d4f0efb05f2bcf063c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Point3 &amp;</type>
      <name>getP2</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>abba619e11450be22a4235e0c0eddb9bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getRadius</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a1743c6ab74bbabfa6a17c109a4a3ae1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a80c7642061d2fa10cf68ad86121b4cd4</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a1a11d3d693c30bbe8f6f16efb91a2800</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>p1_</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a8eaba4b0ae66b11ff3aa3544183650f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>p2_</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>ab4fc31d1a261527ab6383e44664fe94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>normal_</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a573f4ca5a5da11fe564b7dd311595e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>radius_</name>
      <anchorfile>classsch_1_1S__Cylinder.html</anchorfile>
      <anchor>a0230c5bb1149b66eb2bd5201cd8c6fef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Object</name>
    <filename>classsch_1_1S__Object.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>S_ObjectType</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TS_Object</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a5dfbe65b9bdbf92b7f4ca8930d78d5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TPolyhedron</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a448c1cb18b4282e0225042c241298c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSTP_BV</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a7d24a637639ba646fbd0c49c2d6038ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSphere</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482ab2e068be5a6e1b419e0dffebca59cf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TBox</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a2921263798ef1699352e5c83c9598ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSuperellipsoid</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a18a371a6641655dd42ee5a0785d80f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSTP_BV_WithPolyhedron</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482ad3fb102f41b56995bf95a95a35358093</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TPoint</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a4cfd0d78203d3c0a023ebd04f2ca6320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCapsule</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a2c8f96f733838b5a5a85c435dce6b35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCone</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a931a0b05f7114adb92b6343c4a78d254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCylinder</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a88261628520492d15796b86c94f987ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TS_Object</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a5dfbe65b9bdbf92b7f4ca8930d78d5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TPolyhedron</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a448c1cb18b4282e0225042c241298c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSTP_BV</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a7d24a637639ba646fbd0c49c2d6038ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSphere</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482ab2e068be5a6e1b419e0dffebca59cf0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TBox</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a2921263798ef1699352e5c83c9598ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSuperellipsoid</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a18a371a6641655dd42ee5a0785d80f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TSTP_BV_WithPolyhedron</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482ad3fb102f41b56995bf95a95a35358093</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TPoint</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a4cfd0d78203d3c0a023ebd04f2ca6320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCapsule</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a2c8f96f733838b5a5a85c435dce6b35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCone</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a931a0b05f7114adb92b6343c4a78d254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TCylinder</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>abe9b175195c12ac74eb9ee1dbf620482a88261628520492d15796b86c94f987ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a9e8b81c26e80d77eea72d5ee9968123b</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API S_Object *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a0eae1bc01d12339a96000e96f52507d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Object</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a9ca1a84a6484ccb18d67538dc96e11cc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_Object</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>aa3bfbb36b15c273ef28b5fe421445f21</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a2cbde8713835787904c9646f8615baf8</anchor>
      <arglist>(const Vector3 &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a27b3f5d28236f285572a81827cc8e355</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;LastFeature) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>constructFromFile</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a6cbda84b503e44119ec762ae0ef758b7</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a13ee6e3dac6c66a93e408301d4bbff8d</anchor>
      <arglist>(const Matrix3x3 &amp;Rotation)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>aab22f84e121a99c9328555a128d0d77d</anchor>
      <arglist>(const Scalar &amp;r00, const Scalar &amp;r01, const Scalar &amp;r02, const Scalar &amp;r10, const Scalar &amp;r11, const Scalar &amp;r12, const Scalar &amp;r20, const Scalar &amp;r21, const Scalar &amp;r22)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>ad2d2a16ef153c1ade478d30578e64ec0</anchor>
      <arglist>(const Quaternion quaternion)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a18e65f73c95670c920665bc1ff03c4fc</anchor>
      <arglist>(const Scalar &amp;q0, const Scalar &amp;q1, const Scalar &amp;q2, const Scalar &amp;q3)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a9f88e2b1117c61c50c262a909110832a</anchor>
      <arglist>(const Scalar &amp;yaw, const Scalar &amp;pitch, const Scalar &amp;roll)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a7cdb3063f094597488ff7369a7019e43</anchor>
      <arglist>(const Scalar *const p)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>ac7a10ee5c0100b5e343fea7cd0a3c2a7</anchor>
      <arglist>(const Scalar &amp;angle, const Vector3 &amp;axe)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setPosition</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a6f7bcd04e054bad613ac08ac3fa7cb20</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setPosition</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a89971b175930d258cc8b24a5c345609d</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setPosition</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a70177a54e7683f93ec1bc68f5026fbff</anchor>
      <arglist>(const Scalar *const v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setTransformation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a1fe04345adc6fbfdacb1775bdd5123a5</anchor>
      <arglist>(const Matrix4x4 &amp;transformation)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addRotation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a3f979aaaff7d8da102c64723547cd3ca</anchor>
      <arglist>(const Matrix3x3 &amp;Rotation)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addRotation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a904035f7595a932de0919ad09085a182</anchor>
      <arglist>(const Scalar &amp;r00, const Scalar &amp;r01, const Scalar &amp;r02, const Scalar &amp;r10, const Scalar &amp;r11, const Scalar &amp;r12, const Scalar &amp;r20, const Scalar &amp;r21, const Scalar &amp;r22)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addRotation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a6e35541e527b52ff471aadec41e639f3</anchor>
      <arglist>(const Quaternion quaternion)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addRotation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>acf2100b77a426baafee0c4a0077160b9</anchor>
      <arglist>(const Scalar &amp;q0, const Scalar &amp;q1, const Scalar &amp;q2, const Scalar &amp;q3)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addRotation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>acb5a0d9a8ee95a04f19eefc61ad82293</anchor>
      <arglist>(const Scalar &amp;angle, const Vector3 &amp;axe)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addRotation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a279eabaf853d351387362942b162eeb5</anchor>
      <arglist>(const Scalar &amp;yaw, const Scalar &amp;pitch, const Scalar &amp;roll)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addRotation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>aa679f18353bef89a31a3efd7faffb74b</anchor>
      <arglist>(const Scalar *const p)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addScale</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a08a09850d52207124ee028e25926e022</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addTransformation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a80d3ec85788a6c6542275d04dd7520b8</anchor>
      <arglist>(const Matrix4x4 &amp;transformation)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>resetTransformation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>aeeec7152af7e673195a5d5129e92baac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Vector3 &amp;</type>
      <name>getPosition</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a8c3cc541c2823ffe91ba9609263cfd3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Matrix3x3 &amp;</type>
      <name>getOrientation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a8e1e088ccb9a57d7049fc1db8342bbab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>getTransformationMatrix</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a5feabd94b8a16b206f38dab7cf77f85a</anchor>
      <arglist>(Scalar *S) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSlices</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a509117d2e9dfa7765f0855b9ace2f643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getStacks</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>aa1dff4f9f693cc9d0eb24a913999f060</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>ae5c3ba09748e8c5c3a4c202dad745563</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const S_ObjectTimeStamp &amp;</type>
      <name>checkStamp</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>ac424e6918998c3a7280da4998847a194</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>ad67c7c933e4cff7da597caa0f5a774c4</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addTranslation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>ab29ca2e90beca4fcb93473bdad2fa7ce</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addTranslation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>aaef0a307dbb1d0f0165a6d2e8644dbf4</anchor>
      <arglist>(const Scalar *const v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addTranslation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a5e10b0170f7c3fa59c27565cd873b197</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>S_ObjectTimeStamp</type>
      <name>stamp_</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a8d30232a8b5c3f93dceba05b9642bf8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>stacks_</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a93717996f00304c56eb9ccb637285167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>slices_</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a8c42b0968b80f863c8ef19cf5bf6ca3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3x3</type>
      <name>mRot_</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a69bd42be4163fe6930eaf7cdd4b3047f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>trans_</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a2deb9b019c5a7b4553b71d5620516a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addTranslation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>ab29ca2e90beca4fcb93473bdad2fa7ce</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addTranslation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>aaef0a307dbb1d0f0165a6d2e8644dbf4</anchor>
      <arglist>(const Scalar *const v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addTranslation</name>
      <anchorfile>classsch_1_1S__Object.html</anchorfile>
      <anchor>a5e10b0170f7c3fa59c27565cd873b197</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_ObjectNonNormalized</name>
    <filename>classsch_1_1S__ObjectNonNormalized.html</filename>
    <base>sch::S_Object</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_ObjectNonNormalized</name>
      <anchorfile>classsch_1_1S__ObjectNonNormalized.html</anchorfile>
      <anchor>a9741d090ed8d15aa7fc1b91aacf4b792</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~S_ObjectNonNormalized</name>
      <anchorfile>classsch_1_1S__ObjectNonNormalized.html</anchorfile>
      <anchor>ac664e926923b203be9a53d01634d2418</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1S__ObjectNonNormalized.html</anchorfile>
      <anchor>a0843a3de701f31151f8dba0ded0a1f5d</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1S__ObjectNonNormalized.html</anchorfile>
      <anchor>a2332713acb7cd8679d40f5bf46c393aa</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;LastFeature) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classsch_1_1S__ObjectNonNormalized.html</anchorfile>
      <anchor>a9b2d6ae8dcd9e8876365da18910b40ec</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_ObjectNormalized</name>
    <filename>classsch_1_1S__ObjectNormalized.html</filename>
    <base>sch::S_Object</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_ObjectNormalized</name>
      <anchorfile>classsch_1_1S__ObjectNormalized.html</anchorfile>
      <anchor>a2efd9c3fb299c93b2076e65fbdfffeaf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_ObjectNormalized</name>
      <anchorfile>classsch_1_1S__ObjectNormalized.html</anchorfile>
      <anchor>aa0a24bc5e5202b98939ec304c0d00832</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1S__ObjectNormalized.html</anchorfile>
      <anchor>a312aa239f88f457859ad3573b5916c64</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1S__ObjectNormalized.html</anchorfile>
      <anchor>a8c3f648f5ef603f42fdff78a9bab148e</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;LastFeature) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classsch_1_1S__ObjectNormalized.html</anchorfile>
      <anchor>a77a398b21a1f242ff7b5ab6ce6036014</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>S_ObjectTimeStamp</name>
    <filename>structS__ObjectTimeStamp.html</filename>
  </compound>
  <compound kind="class">
    <name>sch::S_Point</name>
    <filename>classsch_1_1S__Point.html</filename>
    <base>sch::S_ObjectNonNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Point</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>aeab81cbb5e6cde14ea06ec873291bbc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~S_Point</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>aadf29a4687521a8927a21c3a1f4c3988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Point *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>a20ad7cc4197316f7aa79bfd953638e86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setDisplayRadius</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>a9d16c28c4b16bb9016fec3700e86dc3f</anchor>
      <arglist>(Scalar r)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getDisplayRadius</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>aab1508f8f4b5ac5bb289893c72b91725</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>acdac8f9ea44e7187a81ef2641a3dedd6</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>a0c596d23e5619d49bcab0e31b2736b28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>displayRadius_</name>
      <anchorfile>classsch_1_1S__Point.html</anchorfile>
      <anchor>a4075fdd78035a6d66cee7750923727e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::s_PointsComparator</name>
    <filename>structsch_1_1s__PointsComparator.html</filename>
    <member kind="function">
      <type></type>
      <name>s_PointsComparator</name>
      <anchorfile>structsch_1_1s__PointsComparator.html</anchorfile>
      <anchor>a588df09556081a10513d29990233f491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>structsch_1_1s__PointsComparator.html</anchorfile>
      <anchor>abf10ee21ae38438c2f1ff6480b812029</anchor>
      <arglist>(const Point3 &amp;axis, const std::vector&lt; Point3 &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structsch_1_1s__PointsComparator.html</anchorfile>
      <anchor>a08875bd67061559e46b29badcb3032ae</anchor>
      <arglist>(unsigned int id1, unsigned int id2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__PointsComparator.html</anchorfile>
      <anchor>abbc5e5c411b0e36cfed833b19098f1bb</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>m_axis</name>
      <anchorfile>structsch_1_1s__PointsComparator.html</anchorfile>
      <anchor>a2008cfa00e76b71a22a717ab12f98178</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point3 &gt;</type>
      <name>m_points</name>
      <anchorfile>structsch_1_1s__PointsComparator.html</anchorfile>
      <anchor>afbdc9909ff149ff5dc227db3067f37b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Polyhedron</name>
    <filename>classsch_1_1S__Polyhedron.html</filename>
    <base>sch::S_ObjectNonNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Polyhedron</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>aa47f8b85c7f296889be212d97debc5da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Polyhedron</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>ae1e1e8a291754ba6ed867503323f8b80</anchor>
      <arglist>(const S_Polyhedron &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_Polyhedron</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>ad6b6bdc6b65d72ae8b9666dad3ac46e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const S_Polyhedron &amp;</type>
      <name>operator=</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a650896bcf3d712ab1ce7a2ffb7a35667</anchor>
      <arglist>(const S_Polyhedron &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Polyhedron *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a0568a0bae4573867b251fb43c0e14a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>constructFromFile</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a62e27360640d760e615ef63b369ee022</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>loadFromBinary</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>ab715d958f257219790a588813ebf8388</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>saveToBinary</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a6e9a1d3dfeace08db532ec2b44a90724</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>updateFastArrays</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>aca638ff34cc3b193bca9206fb1735a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Point3</type>
      <name>naiveSupport</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a503f72a1b260268f8c5a056455f9eeb6</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>updateVertexNeighbors</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a3153f91c989eca22177cca0f40c5ea8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>clearNeighbors</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a4b46a8aaf0e796b65903fd48dc7edbd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>clear</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a81da841833ce2b5efa98fce13c673db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>deleteVertexesWithoutNeighbors</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>ab3aadd37543713ebdba4aa9215d74e6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API int</type>
      <name>getTrianglesNumber</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>ad5a5dcfa2cc3b9d96163677e14d5021d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Polyhedron_algorithms *</type>
      <name>getPolyhedronAlgorithm</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>ad41837a17e79dcfbf47bfe42ac6d91db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a19829548e2aff1818a6daa60b9536c33</anchor>
      <arglist>(Archive &amp;ar, const unsigned int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>aea80ccb0b4b19b5f49c3367d14c6bf78</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a30fc5d9086c51624c05f1bb4910fd5e0</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>accee47d7b3149736f670070f1006e037</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Polyhedron_algorithms</type>
      <name>poly</name>
      <anchorfile>classsch_1_1S__Polyhedron.html</anchorfile>
      <anchor>a510cc7c126cda8905e8dcae347db3fc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_PolyhedronVertex</name>
    <filename>classsch_1_1S__PolyhedronVertex.html</filename>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_PolyhedronVertex</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a0c11a8db536b0529f0e0a83dfe0705fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_PolyhedronVertex</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>afd9713c25776fe2f258b8fae587468ff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addNeighbor</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a163413ad004bb25eb58d2651c950d2e7</anchor>
      <arglist>(S_PolyhedronVertex *)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>supportH</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a73c7a66241f4edd141832806c6862962</anchor>
      <arglist>(const Vector3 &amp;direction) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API SCH_CORE_DEPRECATED void</type>
      <name>setCordinates</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a584640dc745ceec455cff8b775badd15</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setCoordinates</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>ab6b24b0253a23cab96462d44b56f926f</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API SCH_CORE_DEPRECATED void</type>
      <name>setCordinates</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>acefa619d1ec7909bf534569f38da6534</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setCoordinates</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a0611778c1610c6b34e30a9b803098e9d</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API SCH_CORE_DEPRECATED const Vector3 &amp;</type>
      <name>getCordinates</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>aaa26b669fd4ca9efc497b7802d3d1eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Vector3 &amp;</type>
      <name>getCoordinates</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a439dda6577a68e3bde99c0b3b286e4f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_PolyhedronVertex *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a75c99e3369785eb9697ecd080cd9e01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>clearNeighbors</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a54d30fade9a1f4bda157c2f4a434ce8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHere</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>ab644a62d307135df8c0568b60cf51a2e</anchor>
      <arglist>(const Vector3 &amp;direction, const Scalar &amp;currentsupportH)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHere</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a01804b36c1edd6108f6522a62636f8f3</anchor>
      <arglist>(const Vector3 &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>updateFastArrays</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>ab4aaabba520d4e589eff17bc9150bfe5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setNumber</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a08644dd5ca96bfbd1f21d8c643febd1f</anchor>
      <arglist>(unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API unsigned int</type>
      <name>getNumber</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a952c9618b523cb61190ab6f0624e0499</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API S_PolyhedronVertex *</type>
      <name>getNextVertex</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a00ab866cc40e6bb2a46f924e2ce6c379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API Scalar</type>
      <name>getNextVertexH</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a2461e8c43c5cc0a56f647eeae913ae24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API unsigned</type>
      <name>getNumNeighbors</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a6d8755cbf0dc738368d03bc051e1da87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classsch_1_1S__PolyhedronVertex.html</anchorfile>
      <anchor>a72d1c8904a4682bd1ad0d51720430a01</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Sphere</name>
    <filename>classsch_1_1S__Sphere.html</filename>
    <base>sch::S_ObjectNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Sphere</name>
      <anchorfile>classsch_1_1S__Sphere.html</anchorfile>
      <anchor>a7f5fb252f488ae72384772d008e34f0d</anchor>
      <arglist>(const Scalar &amp;radius)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_Sphere</name>
      <anchorfile>classsch_1_1S__Sphere.html</anchorfile>
      <anchor>adcbe1554998eef32743141518e456c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Sphere *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Sphere.html</anchorfile>
      <anchor>aa060ef63bd50967432f36ae3fd9d470a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Sphere.html</anchorfile>
      <anchor>a6af2fe347bceaff36ed0fec86b2d5f60</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Sphere.html</anchorfile>
      <anchor>a0e298ed9e98159265742fa6d30d05991</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Scalar</type>
      <name>getRadius</name>
      <anchorfile>classsch_1_1S__Sphere.html</anchorfile>
      <anchor>a553f09bf076d60eec59cd26c40d95fff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>radius_</name>
      <anchorfile>classsch_1_1S__Sphere.html</anchorfile>
      <anchor>ac256f91125108c84090dc0c92f896e6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::s_SphereApproxim</name>
    <filename>structsch_1_1s__SphereApproxim.html</filename>
    <member kind="function">
      <type></type>
      <name>s_SphereApproxim</name>
      <anchorfile>structsch_1_1s__SphereApproxim.html</anchorfile>
      <anchor>ad9a77db6cb603f0fed3263e2bbba3d16</anchor>
      <arglist>(std::vector&lt; Point3 &gt; &amp;vertices, int step, const Point3 &amp;sphereCenter, double sphereRadius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structsch_1_1s__SphereApproxim.html</anchorfile>
      <anchor>a3ff18cb174a6865c6435fe8335e2f0fc</anchor>
      <arglist>(const Triangle &amp;vertices, const int &amp;currentStep) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__SphereApproxim.html</anchorfile>
      <anchor>aabc1747809d50b574a96afd9e3834bbc</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point3 &gt; &amp;</type>
      <name>m_vertices</name>
      <anchorfile>structsch_1_1s__SphereApproxim.html</anchorfile>
      <anchor>af9477226068b07023a7fd94299ed22a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_step</name>
      <anchorfile>structsch_1_1s__SphereApproxim.html</anchorfile>
      <anchor>a9e835d0dd78964f2714485ac2129e745</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>m_sphereCenter</name>
      <anchorfile>structsch_1_1s__SphereApproxim.html</anchorfile>
      <anchor>a44cc0d6739326f325010353c8026eed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m_sphereRadius</name>
      <anchorfile>structsch_1_1s__SphereApproxim.html</anchorfile>
      <anchor>a1bc14beb85cc33d172681af427f30397</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>s_STN_STBVData</name>
    <filename>structs__STN__STBVData.html</filename>
  </compound>
  <compound kind="struct">
    <name>sch::s_STN_VVR</name>
    <filename>structsch_1_1s__STN__VVR.html</filename>
    <member kind="function">
      <type></type>
      <name>s_STN_VVR</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a1c9c5ea5dabf16dd47ed040d045137c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>s_STN_VVR</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a722caaa0849e92821c989783192b43ec</anchor>
      <arglist>(Scalar cosangle, const Vector3 &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>s_STN_VVR</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a3a8454eea92ae667eb4082380cf4f023</anchor>
      <arglist>(const s_STN_VVR &amp;vvr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a5536bf682a09ac26960965ed35dc0ccf</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>getDistance</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a5b3f442d54da453752947998aff81d43</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameLimit</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>ae74a444f605ae2f735d9e69cd30703de</anchor>
      <arglist>(const s_STN_VVR &amp;vvr) const</arglist>
    </member>
    <member kind="function">
      <type>s_STN_VVR &amp;</type>
      <name>operator=</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>aa6740851ec31b8cba8582a282475acdb</anchor>
      <arglist>(const s_STN_VVR &amp;vvr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a2088b53d7fbdad2532c71575da6b21da</anchor>
      <arglist>(const s_STN_VVR &amp;vvr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a50a188c43ca8a86215fc55b82cfdc07f</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>m_axis</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>aee19e539356640680f80eff7713decaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m_cosangle</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>ab2470931e0464046f40e90849590bb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_outerSTP</name>
      <anchorfile>structsch_1_1s__STN__VVR.html</anchorfile>
      <anchor>a8efe7a8a7dff667634f6b265c391d20b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::s_STP_Circle</name>
    <filename>structsch_1_1s__STP__Circle.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsch_1_1s__STP__Circle.html</anchorfile>
      <anchor>a8e2d1e8bbcb70afa8fb5ddb9579d07ce</anchor>
      <arglist>(const s_STP_Circle &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__STP__Circle.html</anchorfile>
      <anchor>a04902cc97a45bbdacb456a60a0a3d357</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>s_STP_Circle</name>
      <anchorfile>structsch_1_1s__STP__Circle.html</anchorfile>
      <anchor>ae6c6fe747bd8b10a82c688a9458ca661</anchor>
      <arglist>(const Vector3 &amp;normal, const Point3 &amp;center, Scalar radius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>s_STP_Circle</name>
      <anchorfile>structsch_1_1s__STP__Circle.html</anchorfile>
      <anchor>a4d4a718bc1b3c002336ca5e558892fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>m_normal</name>
      <anchorfile>structsch_1_1s__STP__Circle.html</anchorfile>
      <anchor>ac44c751d5af1c59573fd23e3489b2dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>m_center</name>
      <anchorfile>structsch_1_1s__STP__Circle.html</anchorfile>
      <anchor>ac8ab91dc8bd6c54832b74ac58fdae443</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m_radius</name>
      <anchorfile>structsch_1_1s__STP__Circle.html</anchorfile>
      <anchor>a209dff3ea692cb78b8de517fa84b0e9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::s_STP_STBVData</name>
    <filename>structsch_1_1s__STP__STBVData.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__STP__STBVData.html</anchorfile>
      <anchor>afaf4279003f554a915e949870732b27f</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Point3 &gt;</type>
      <name>m_points</name>
      <anchorfile>structsch_1_1s__STP__STBVData.html</anchorfile>
      <anchor>a3a8d88b770ab7e2cf1c555f32ebd315a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; STN_VVR &gt;</type>
      <name>m_VVRlimits</name>
      <anchorfile>structsch_1_1s__STP__STBVData.html</anchorfile>
      <anchor>a5c8f8ad5abd38c1a5b28abb4669a109a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; bool &gt;</type>
      <name>m_reverse</name>
      <anchorfile>structsch_1_1s__STP__STBVData.html</anchorfile>
      <anchor>ad60c9b18ee5f94fa576300aa4e98561b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_BVID</name>
      <anchorfile>structsch_1_1s__STP__STBVData.html</anchorfile>
      <anchor>a78c62b9756467a99618a29b5596c1283</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::s_STP_VVR</name>
    <filename>structsch_1_1s__STP__VVR.html</filename>
    <member kind="function">
      <type></type>
      <name>s_STP_VVR</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a2839e2854dc772457f6c5fe27fb1c8ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>s_STP_VVR</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>ae9503e95736a7ae91900ffd3496bbebb</anchor>
      <arglist>(Scalar cosangle, const Vector3 &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>s_STP_VVR</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>aa66448e085182b1728cd12b8e4f3fd78</anchor>
      <arglist>(const s_STP_VVR &amp;vvr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a8393d4b52c482d795990caeeb18ac8f9</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>isInsidePrime</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a673cb7a23cdc2c771529de57b1f67cd9</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>isInsidePlane</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>ae48ddcc61209a155731168fad1305e04</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>getDistance</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a4ce6edbec9d474bed69ddbdc2716de3e</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameLimit</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a95d7e6516672bd1eb51241161317ba83</anchor>
      <arglist>(const s_STP_VVR &amp;vvr) const</arglist>
    </member>
    <member kind="function">
      <type>s_STP_VVR &amp;</type>
      <name>operator=</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a656e883e2852af22e1962ccb3d6ef790</anchor>
      <arglist>(const s_STP_VVR &amp;vvr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a2ceafdb014a8ab085dae652b2975a7f0</anchor>
      <arglist>(const s_STP_VVR &amp;vvr) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a9178a6335fc6cf00f6c78febcfe60b1b</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>m_axis</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a0c80edd901ddc5edcb90d5b064a84fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m_cosangle</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a8d0d7c422ed14e68a009eaa54cec3193</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>m_outerSTP</name>
      <anchorfile>structsch_1_1s__STP__VVR.html</anchorfile>
      <anchor>a137f6431c8e1a141e723f8fcbeda13bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::S_Superellipsoid</name>
    <filename>classsch_1_1S__Superellipsoid.html</filename>
    <base>sch::S_ObjectNonNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>S_Superellipsoid</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a40bd2cfeca0c2dd5c3b59931459f0c8b</anchor>
      <arglist>(Scalar a, Scalar b, Scalar c, Scalar epsilon1, Scalar epsilon2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~S_Superellipsoid</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a90101be9477ce34d4be29bb59fca5984</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_Superellipsoid *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a5f227e18a709f2586e6bd1db9390070b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>aae100abaa449e132eb2611722d618937</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a3ca58a6b2e6c79f4fa61ceb9080920ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>getEllipsoidParameter</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a612737e0a1fb72466d509acc9b91aadf</anchor>
      <arglist>(Scalar &amp;a, Scalar &amp;b, Scalar &amp;c, Scalar &amp;epsilon1, Scalar &amp;epsilon2) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>a_</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a5f2076a123341895b1c38f4a661f74c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>b_</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>af99c2687b9ed9f760ac2dd0fb2c214c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>c_</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a909e0faaf3b31cf2753cb3695d2c1d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>epsilon1_</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>ad572f1d4f46883d14f1ebc690d3061fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>epsilon2_</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a87ea36b727ccace7e7b359e9d0520eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>_2_e1on2</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>aa144a6558753517cca0da2a5d3b4c201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>_2_e2on2</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>ad7590ac36fe76b31b7392778a8c102cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>_2on2_e1</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>ad5abb14b8d849fec15b853bb7d6cd26f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>_2on2_e2</name>
      <anchorfile>classsch_1_1S__Superellipsoid.html</anchorfile>
      <anchor>a3c746ec0186ec233bc7b206a896c09b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::s_toruslinkedBV</name>
    <filename>structsch_1_1s__toruslinkedBV.html</filename>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__toruslinkedBV.html</anchorfile>
      <anchor>ae14fedc65f777707680096dc76e68fd2</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>buffer</name>
      <anchorfile>structsch_1_1s__toruslinkedBV.html</anchorfile>
      <anchor>a53646145e2a8adb56661a2ebaac43cb8</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sch::s_Triangle</name>
    <filename>structsch_1_1s__Triangle.html</filename>
    <member kind="function">
      <type></type>
      <name>s_Triangle</name>
      <anchorfile>structsch_1_1s__Triangle.html</anchorfile>
      <anchor>a05fcaa0efd62e56d83d868235ca577ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>s_Triangle</name>
      <anchorfile>structsch_1_1s__Triangle.html</anchorfile>
      <anchor>ad70891deac5fca32bd84357b9d4f6945</anchor>
      <arglist>(const Point3 &amp;vertex1, const Point3 &amp;vertex2, const Point3 &amp;vertex3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structsch_1_1s__Triangle.html</anchorfile>
      <anchor>aa43f8ffa9d42600a3e1bd3c54d55b3dc</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>m_vertex1</name>
      <anchorfile>structsch_1_1s__Triangle.html</anchorfile>
      <anchor>a3a5dc40260c9390ba094a0bda5f970dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>m_vertex2</name>
      <anchorfile>structsch_1_1s__Triangle.html</anchorfile>
      <anchor>a94fefcc4b27b97ce51a52c580ccd9c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>m_vertex3</name>
      <anchorfile>structsch_1_1s__Triangle.html</anchorfile>
      <anchor>a87c07b2aa036c5b614f7dca118b639fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::archive::save_access</name>
    <filename>classboost_1_1archive_1_1save__access.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>end_preamble</name>
      <anchorfile>classboost_1_1archive_1_1save__access.html</anchorfile>
      <anchor>a2faef6576eb396f5456b777631b1a5ed</anchor>
      <arglist>(Archive &amp;ar)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save_primitive</name>
      <anchorfile>classboost_1_1archive_1_1save__access.html</anchorfile>
      <anchor>ae973b36ce255d81f4c051a32a7f4148c</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_array_type</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__array__type.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__array__type.html</anchorfile>
      <anchor>a830993f7f8f0370f925318b5a4c52231</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_non_pointer_type::save_conditional</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__conditional.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__conditional.html</anchorfile>
      <anchor>a02450d3faea2141d1204259b77153c87</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_enum_type</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__enum__type.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__enum__type.html</anchorfile>
      <anchor>af4de202d74d78da07feace21097522ce</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_non_pointer_type</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__non__pointer__type.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_conditional</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_only</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_primitive</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type::save_standard</class>
    <member kind="typedef">
      <type>BOOST_DEDUCED_TYPENAME mpl::eval_if&lt; mpl::equal_to&lt; boost::serialization::implementation_level&lt; T &gt;, mpl::int_&lt; boost::serialization::primitive_type &gt; &gt;, mpl::identity&lt; save_primitive &gt;, BOOST_DEDUCED_TYPENAME mpl::eval_if&lt; mpl::greater_equal&lt; boost::serialization::implementation_level&lt; T &gt;, mpl::int_&lt; boost::serialization::object_class_info &gt; &gt;, mpl::identity&lt; save_standard &gt;, BOOST_DEDUCED_TYPENAME mpl::eval_if&lt; mpl::equal_to&lt; boost::serialization::tracking_level&lt; T &gt;, mpl::int_&lt; boost::serialization::track_never &gt; &gt;, mpl::identity&lt; save_only &gt;, mpl::identity&lt; save_conditional &gt; &gt; &gt; &gt;::type</type>
      <name>typex</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__non__pointer__type.html</anchorfile>
      <anchor>a69886c441e62b1215ee0286b7348df3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__non__pointer__type.html</anchorfile>
      <anchor>aec0688f844b739d1d07839bc7a253a94</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_non_pointer_type::save_only</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__only.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__only.html</anchorfile>
      <anchor>a630dad0e6398d08f452f8088047d4a3b</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_pointer_type</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__pointer__type.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">boost::archive::detail::save_pointer_type::abstract</class>
    <class kind="struct">boost::archive::detail::save_pointer_type::non_abstract</class>
    <class kind="struct">boost::archive::detail::save_pointer_type::non_polymorphic</class>
    <class kind="struct">boost::archive::detail::save_pointer_type::polymorphic</class>
    <member kind="function" static="yes">
      <type>static const basic_pointer_oserializer *</type>
      <name>register_type</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type.html</anchorfile>
      <anchor>a76f28c573bed6aa99a0053cf889c71f1</anchor>
      <arglist>(Archive &amp;ar, T &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>save</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type.html</anchorfile>
      <anchor>af300028192a741a148beb1f22209aa5b</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t, const basic_pointer_oserializer *bpos_ptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>const_check</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type.html</anchorfile>
      <anchor>a7d774e1a16cd01946748b1292970423c</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__pointer__type.html</anchorfile>
      <anchor>a5f34b3c8c859335bf0f0de964b6aaee2</anchor>
      <arglist>(Archive &amp;ar, const TPtr t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_non_pointer_type::save_primitive</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__primitive.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__primitive.html</anchorfile>
      <anchor>a1dc7d5ba33edd6fe02703ece4c33ef4c</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>boost::archive::detail::save_non_pointer_type::save_standard</name>
    <filename>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__standard.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>invoke</name>
      <anchorfile>structboost_1_1archive_1_1detail_1_1save__non__pointer__type_1_1save__standard.html</anchorfile>
      <anchor>a98f54dcfb2b32baae449012c7fb4c7fa</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FileParsing::SimplestParsing</name>
    <filename>classFileParsing_1_1SimplestParsing.html</filename>
    <member kind="function">
      <type></type>
      <name>SimplestParsing</name>
      <anchorfile>classFileParsing_1_1SimplestParsing.html</anchorfile>
      <anchor>a5e12530267e2b116fabd7aee7e108950</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SimplestParsing</name>
      <anchorfile>classFileParsing_1_1SimplestParsing.html</anchorfile>
      <anchor>aea9e2be4989e87f57b4447863bbbbb37</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>std::stringstream &amp;</type>
      <name>operator()</name>
      <anchorfile>classFileParsing_1_1SimplestParsing.html</anchorfile>
      <anchor>afd8c75287843a917ef8d089be9a18e88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>find</name>
      <anchorfile>classFileParsing_1_1SimplestParsing.html</anchorfile>
      <anchor>a50d817d4aee01cf63ae64b655343c34a</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfNextString</name>
      <anchorfile>classFileParsing_1_1SimplestParsing.html</anchorfile>
      <anchor>aa9e45621b1ef105c1e6b7de8a0a8a5ef</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>jumpSeparators</name>
      <anchorfile>classFileParsing_1_1SimplestParsing.html</anchorfile>
      <anchor>a087cec6988a97410a091ed2d59d5de38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classFileParsing_1_1SimplestParsing.html</anchorfile>
      <anchor>a7c5ebb766ede85f647e21f84206ba5fc</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::STP_BigSphere</name>
    <filename>classsch_1_1STP__BigSphere.html</filename>
    <base>sch::STP_Feature</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_BigSphere</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>ac3029cb84400e87bf26958518ddd8612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_BigSphere</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a5355505964cbd4074ece3f2e2f2790a9</anchor>
      <arglist>(Scalar radius, Point3 center)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_BigSphere</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>ad0d2a1ff9caa73738b47e8cc1e0ce3bb</anchor>
      <arglist>(const STP_BigSphere &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~STP_BigSphere</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>aa63f7a6506a1724dcc91ba540a5724dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Point3 &amp;</type>
      <name>getCenter</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a375b22cf23b0d12928724bcd0405c75d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setVVR</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a2ecba3ed23123d7268c1918ce055e1a2</anchor>
      <arglist>(const STP_VVR *vvr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>print</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a0b0f19696020d744f1ae4ad047cb6215</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHere</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a0e355ba4e3c433d31690955d64219151</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbour</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a40cec9b4c5ef0351b91b64f4bb8604aa</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a0a1f0aa0a5412a78f4d74ffd59c1e722</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbour</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>ab027912fca814a7e93d27367cf69075a</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a05a954ecd46c89d333ec5510fd5afc7e</anchor>
      <arglist>(const Vector3 &amp;v, int idp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereHybrid</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>aba4e8386407774beee109f190ca9b328</anchor>
      <arglist>(const Vector3 &amp;v, int idp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API int</type>
      <name>getNextBV</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a460b6b23d2a67b3b157cb6991993432e</anchor>
      <arglist>(unsigned int id) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Scalar</type>
      <name>supportH</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a1b9a87015a83529adaf32bd47c6a4e23</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>aae7be1dc3a6573043e029bbdcd37425e</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>ray_cast</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a2a34f1e7c711748bef6337777abacaa5</anchor>
      <arglist>(const Point3 &amp;source, const Point3 &amp;target, Scalar &amp;param, Vector3 &amp;normal) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API STP_Feature *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a5ed4fb808414850d6b66858075123732</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API int</type>
      <name>getNextBVPrime</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a355d960838e2609ec8cd61c0bd8b5e4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>af77960f4456575a364ca4884991abecf</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>m_radius</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>acc7f4438031029112bb6fb54d8ece265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>m_center</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a29c2454f0211a5d1380f2d30e239a576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR</type>
      <name>m_VVR0</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>acbf92ff732a80233fb91d2bc6c810f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR</type>
      <name>m_VVR1</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a9a8a93c6c9f9d736e0491a40a6a599ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR</type>
      <name>m_VVR2</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>a75a49009228cc0203ff07df69b3e88ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nextBV</name>
      <anchorfile>classsch_1_1STP__BigSphere.html</anchorfile>
      <anchor>aa13f1ae066e5dc0d1a43e62edcf96178</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::STP_BV</name>
    <filename>classsch_1_1STP__BV.html</filename>
    <base>sch::S_ObjectNormalized</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_BV</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a73e85c028d13c97c54120a1c7ec15b09</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_BV</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a6e3c9d05f6f07d080ef14ae39908834d</anchor>
      <arglist>(const STP_BV &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~STP_BV</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>ad9aa580fb205a0cb5b9a2aa76f453a38</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API STP_BV &amp;</type>
      <name>operator=</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>ad9813f438bad9623fae80f79baebae3f</anchor>
      <arglist>(const STP_BV &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API STP_BV *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>abd8d028418e72cbe42e771b4488c0b60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a5edbb0b6f22e83cf600de59476564ee4</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a68ae4781ea6ab4daab91a949cece0e9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>constructFromFile</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a82a1a26e0729a3647a794747751d9d51</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>constructFromFileWithGL</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>aa52353db41403b781956c1c96233469b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>loadFromBinary</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>ad5ea21124f7bccbfdb313af64c81f895</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>saveToBinary</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>ad36ae1d26f6ffb77d5d11cdb7f3dadab</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>saveTreeInFile</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>ab5ca9f023130b11b86efcfaa1b720ae8</anchor>
      <arglist>(const std::string &amp;treefilename, ArchiveType type=TEXT_ARCHIVE)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>addPatch</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a4ba9dc25062a02dd3de3106b43ec92d8</anchor>
      <arglist>(STP_Feature *patch)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>printSupportTree</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a3e7b2c178a8b19bdd77be8d4348b4308</anchor>
      <arglist>(std::string filename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Scalar</type>
      <name>supportH</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a6b42248b2a5a4d99102e4a24772bfd14</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>supportNaive</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>aead44b5250a47b792810760c10463487</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>supportFarthestNeighbour</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a1273717fe2ed9400a0f47eca321022b9</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>supportFarthestNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a1fb7b3d3e7195a46aba7eda44040d306</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>supportHybrid</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a295921ea764705362548cbadbe15a20e</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>supportFirstNeighbour</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>ae313bb075ef8d3f713f706f48dd0c972</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>supportFirstNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>aea3583813e20282d2f9e4ecde0eb60e0</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>ray_cast</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a91370d90618616d734e08ed4f100c4d8</anchor>
      <arglist>(const Point3 &amp;source, const Point3 &amp;target, Scalar &amp;param, Vector3 &amp;normal) const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API int</type>
      <name>getFeaturesNumber</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a12f086f48ba7c0df82a56d8fd3903a74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; sch::Geometry &gt; &amp;</type>
      <name>getGeometries</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>abf1d08f03c0dfc718f3a69eb9b144961</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>aa5cc9b743dbb3d43cd094b84d5f8b4a2</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a4934d41c1cb70e5f2343567852868eb0</anchor>
      <arglist>(Archive &amp;ar, const unsigned int) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCH_API void</type>
      <name>loadTreeFromFile</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a112b2f2adae893b40a3bb52c5162dff6</anchor>
      <arglist>(const std::string &amp;treefilename, ArchiveType type=TEXT_ARCHIVE)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCH_API void</type>
      <name>computeArcPointsBetween</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a99965c6640a0117277c8170e878e2e9c</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, const Point3 &amp;center, int step, std::vector&lt; Point3 &gt; &amp;res) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCH_API void</type>
      <name>computeConePointsBetween</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a21cb966f5872d39322ca2314461fbf2a</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;p2, Vector3 axis, int step, std::vector&lt; Point3 &gt; &amp;res, Matrix3x3 &amp;homo)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCH_API Point3</type>
      <name>computeLinesCommonPoint</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a94fd56a0c954734b061bc4c00a187338</anchor>
      <arglist>(const Point3 &amp;l1p1, const Point3 &amp;l1p2, const Point3 &amp;l2p1, const Point3 &amp;l2p2) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCH_API Point3</type>
      <name>computeCenter</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a406ac638acd0f4f8964e897ca183eb71</anchor>
      <arglist>(const std::vector&lt; Point3 &gt; &amp;points)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>SCH_API void</type>
      <name>updateFastPatches</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a7723350895039386e98d6dd88c15dca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; STP_Feature * &gt;</type>
      <name>m_patches</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a247686915b2d1bc23e07a53365c104e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_Feature **</type>
      <name>m_fastPatches</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a6aea938ef489dbc647c72795792cf791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_Feature **</type>
      <name>m_lastPatches</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a122e883ca48665f52cdf493bf59282a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_patchesSize</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>a4868142b2700bad682dfe87ba4534a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Geometry &gt;</type>
      <name>geometries_</name>
      <anchorfile>classsch_1_1STP__BV.html</anchorfile>
      <anchor>aeee20aadf85e04b86790615c76c0e64f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::STP_BV_P</name>
    <filename>classsch_1_1STP__BV__P.html</filename>
    <base>sch::STP_BV</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_BV_P</name>
      <anchorfile>classsch_1_1STP__BV__P.html</anchorfile>
      <anchor>a219d0e8c56366f518b17bb7dfecf501b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API STP_BV_P *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1STP__BV__P.html</anchorfile>
      <anchor>a5782cb566683930692eee48c03a8edab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>l_Support</name>
      <anchorfile>classsch_1_1STP__BV__P.html</anchorfile>
      <anchor>a1f744488c2aeff2cfc79d7090b11266d</anchor>
      <arglist>(const Vector3 &amp;v, int &amp;lastFeature) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>constructFromFile</name>
      <anchorfile>classsch_1_1STP__BV__P.html</anchorfile>
      <anchor>a38b0e65cad146a79c5457d7b5487a88a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~STP_BV_P</name>
      <anchorfile>classsch_1_1STP__BV__P.html</anchorfile>
      <anchor>a144d1b3b14803c90c8b2c2b7963d0050</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API S_ObjectType</type>
      <name>getType</name>
      <anchorfile>classsch_1_1STP__BV__P.html</anchorfile>
      <anchor>ac659304d3e1b983d6053192ae9d0248f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::STP_Feature</name>
    <filename>classsch_1_1STP__Feature.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API</type>
      <name>~STP_Feature</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>ae72e851e09413fffcde241448f521c4e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API void</type>
      <name>print</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a166de10b614327ba90a864bab936518d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API STP_Feature *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a13d0276ed002119f03bb1fe3691aa17a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a561126e2d9c89cf3f3febbd93959e973</anchor>
      <arglist>(const Vector3 &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API bool</type>
      <name>isHere</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a8d03577f454390892afbc0cc73b51f44</anchor>
      <arglist>(const Vector3 &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbour</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>acd1e62e62d4af3572f541833aa520761</anchor>
      <arglist>(const Vector3 &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>acc6b2abdb71f0c07d47ef72a8f9d8a6c</anchor>
      <arglist>(const Vector3 &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbour</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>aadab7bf980d6b05f556f39e4d992f579</anchor>
      <arglist>(const Vector3 &amp;v)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>ac0360f69c429278d93943520c2095784</anchor>
      <arglist>(const Vector3 &amp;v, int idp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API bool</type>
      <name>isHereHybrid</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>aa714e8794a59a38c0588e6a2854a42ec</anchor>
      <arglist>(const Vector3 &amp;v, int idp)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API int</type>
      <name>getNextBV</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>af5a972d137b101eac8b99c86e9a4d839</anchor>
      <arglist>(unsigned int id) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SCH_API int</type>
      <name>getNextBVPrime</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a27c109371789f11c1d189260de83bc53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a770d852b3fa6ff5789a870794ad40efc</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>STP_Feature</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a84298910e823b4d553dc1e03a73f2bc1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nextBVPrime</name>
      <anchorfile>classsch_1_1STP__Feature.html</anchorfile>
      <anchor>a5dcc3b0e3b2eb3817e7ec2111419e711</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>STP_SmallSphere</name>
    <filename>classSTP__SmallSphere.html</filename>
  </compound>
  <compound kind="class">
    <name>sch::STP_SmallSphere</name>
    <filename>classsch_1_1STP__SmallSphere.html</filename>
    <base>sch::STP_Feature</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_SmallSphere</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a38ba8e4bd6b09233ad08c442a0e6b85b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_SmallSphere</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a98cddb7a13df011482856825ce7c6d16</anchor>
      <arglist>(Scalar radius, Point3 center)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_SmallSphere</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>ac75b09b3faec08274562ccb6a1e4c213</anchor>
      <arglist>(const STP_SmallSphere &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~STP_SmallSphere</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a7b868151f1a9f7f249ad74acaf10cd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API STP_SmallSphere &amp;</type>
      <name>operator=</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>adb83c20af19fbfd566e7dfdc2e4683cc</anchor>
      <arglist>(const STP_SmallSphere &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Point3 &amp;</type>
      <name>getCenter</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>ae24e7d8e22deebb1b4bd2aca9edd7c8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API const Scalar &amp;</type>
      <name>getRadius</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>ac7fb9663161b6b9fd6a5238a0cf8dea5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setVVR</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a7681fe33dd900a24c6e9256ff82a5985</anchor>
      <arglist>(const std::vector&lt; STP_VVR &gt; &amp;vvr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>print</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a3e7cd4ad702782ee7ac22e1beb35211c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHere</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a9d79f20a1253177440efec6539e78bfc</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbour</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a574ec7a172582055db3d6cf8bcd40af6</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a3cd9b0e2b1c690478adc1279f5dbef59</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbour</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a7f86859c63d07b4f3f185bf8fcecc309</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>aa202e1b9faf6fbdbb5b3ebfb8fa366d1</anchor>
      <arglist>(const Vector3 &amp;v, int idp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereHybrid</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a561e16f73479d2aec0445e34faa6a677</anchor>
      <arglist>(const Vector3 &amp;v, int idp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API int</type>
      <name>getNextBV</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a49db1727c2bfd8c841a390c843937cb8</anchor>
      <arglist>(unsigned int id) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Scalar</type>
      <name>supportH</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a611aa4de39b188da66412700b3f7624f</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a1f1a07200cc792feeb34779c85945d44</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>ray_cast</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a9fd6e84945084bf9c0b99dca2f63142c</anchor>
      <arglist>(const Point3 &amp;source, const Point3 &amp;target, Scalar &amp;param, Vector3 &amp;normal) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API STP_Feature *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a4b6c4f56825d59a030a554cb93b6b088</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API int</type>
      <name>getNextBVPrime</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a0468c5d8e4fd00e39a2e9558bba4b9aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a27ffff7884cec43e214025c2a83c87d7</anchor>
      <arglist>(Archive &amp;ar, unsigned int) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a0569ba70d4d7f204aa16d4da7b7990c1</anchor>
      <arglist>(Archive &amp;ar, unsigned int)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateVector</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>aaf2c26b4ab6f7a6422000355681131a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>m_radius</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>ab3b9a650951994dcd84a3abf6d81e903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>m_center</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a4e72aad6d9b1ca5f159162162c03a0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; STP_VVR &gt;</type>
      <name>m_VVR</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a21a8f8f342b52f7968ece21f68c378ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>m_nextBV</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a7ab8c331dde1379a35daaf5ab8a74fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nextBVPrime</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a0e42379392da07b001d763928f46378f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR *</type>
      <name>m_neighbors</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a14bff0060e4cbbde0edd056dcf0309a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR *</type>
      <name>m_endneighbors</name>
      <anchorfile>classsch_1_1STP__SmallSphere.html</anchorfile>
      <anchor>a49b0a8b55f598884530b9f240515f66b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sch::STP_Torus</name>
    <filename>classsch_1_1STP__Torus.html</filename>
    <base>sch::STP_Feature</base>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_Torus</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a1f63351e0038aebbd5f321d5d3246312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_Torus</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a61fc26d245f16cf5c835f833914e5392</anchor>
      <arglist>(const Vector3 &amp;cNormal, const Point3 &amp;cCenter, Scalar cRadius, Scalar sRadius)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>STP_Torus</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a31e9b5ce66eb2c4c08db5a0580544f79</anchor>
      <arglist>(const STP_Torus &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>SCH_API</type>
      <name>~STP_Torus</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a490040dab54e2ce4d8cc06e69c5a63f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SCH_API void</type>
      <name>setVVR</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a3a7cc807403d247f19f497ac014cd933</anchor>
      <arglist>(const STP_VVR *vvr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API void</type>
      <name>print</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a9b10afcf6bbee6444091490f581a0fb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHere</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a0792e14da372288fdbf500b07c2c0ff9</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbour</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a4101c76048fbc163a87bc1a56015fbe8</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFarthestNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a447642ec9a8d83f97b69425ace60e5fa</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbour</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a2f9f902ede7547eb275e9b19af4b281a</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereFirstNeighbourPrime</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>afd5ed2cb237ade7711583ad4780f559e</anchor>
      <arglist>(const Vector3 &amp;v, int idp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API bool</type>
      <name>isHereHybrid</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a6aee2580643b23b5a2ce094a62564093</anchor>
      <arglist>(const Vector3 &amp;v, int idp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API int</type>
      <name>getNextBV</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>ab6ce0b71cb59eda18cf93ab0ee3f0c52</anchor>
      <arglist>(unsigned int id) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API int</type>
      <name>getNextBVPrime</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a5a299cb67bdbb90e7f4926870666e840</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Scalar</type>
      <name>supportH</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a0ec976e5eecc4fabb1e9bce424d4c099</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API Point3</type>
      <name>support</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a4d5aa8bd0fba88d9f839216f7ca073c7</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SCH_API STP_Feature *</type>
      <name>clone</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a17be83bd420a5ba3ae3921f47beb805a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a4c67fc28d5be783bf4dd79bc46fe4820</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_Circle</type>
      <name>m_circle</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a43cde3b454c7c7c679d05ff87c033332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Scalar</type>
      <name>m_sphereRadius</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a36044a090ad607f5d7f0c74cb2433cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR</type>
      <name>m_VVR0</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>aface1e25323aefdbfb35e1996078ef2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR</type>
      <name>m_VVR1</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a9f44c48148ddadb89b3a0ab7f62aecc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR</type>
      <name>m_VVR2</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>a0be30889289af19e390a3838cb103c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>STP_VVR</type>
      <name>m_VVR3</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>aeefd7327dd1a6b17ed97e85bbd08facc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_nextBV</name>
      <anchorfile>classsch_1_1STP__Torus.html</anchorfile>
      <anchor>ad63017d67e9ff32e17b7745f12ba71c2</anchor>
      <arglist>[4]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>CD_Matrix::Vector3T</name>
    <filename>structCD__Matrix_1_1Vector3T.html</filename>
    <templarg>T</templarg>
    <templarg>normOptimization</templarg>
    <base protection="protected">CD_Matrix::Norm</base>
    <member kind="typedef">
      <type>Vector3T&lt; T, normOptimization &gt;</type>
      <name>Vector</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>afdfb94c0efeea9d9ccbf98a9cc146def</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>adf8640794b7cb06a462c90b23d9bdf33</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a8a6c4992766d238ad7acd2c1c3972141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ad5378e5f874bb539b2af93c414228632</anchor>
      <arglist>(const T &amp;x, const T &amp;y, const T &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ab107c6c2ab3715c491be9e082b466da5</anchor>
      <arglist>(const T *const p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa76aced5918e609ab4a2dcff1fa14475</anchor>
      <arglist>(const T &amp;x, const T &amp;y, const T &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a29638e4284c28b299db83dd0914f58d7</anchor>
      <arglist>(const T *const p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a25da756bac295da0d188e8beaa71919f</anchor>
      <arglist>(const struct Vector3T&lt; T, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T &amp;</type>
      <name>operator=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a39682b37cc76ba0b6264377e3d42c5cd</anchor>
      <arglist>(const struct Vector3T&lt; T, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator-</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa61444a5832801b3bf5f2157e37a8426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a6df2d9a467040ad11c32598213f8e648</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>acf2a9dadbddf51f2a12eacfa00305949</anchor>
      <arglist>(unsigned i) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a18c518c0d48d57dbc64e2e18ca3bac74</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ae0b056f0cd2c8a5bb06bba8ac5578a13</anchor>
      <arglist>(const struct Vector3T&lt; T, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator+</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa6b0fc7a53402accad9575d17d70b1cb</anchor>
      <arglist>(const struct Vector3T&lt; T, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator-</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a69ea3b57858ef1e69e69aafc64594404</anchor>
      <arglist>(const struct Vector3T&lt; T, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a28084751036a94cfbaddf41d618c6e13</anchor>
      <arglist>(const struct Vector3T&lt; T, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a58fab30f953f554c1f2438f582b219c2</anchor>
      <arglist>(const struct Vector3T&lt; T, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a92b9b34943d71391eb4451a9e4670c7f</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a6ee4fa8e85537333302ea08a96cf12ec</anchor>
      <arglist>(const Vector3T&lt; T, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa32081789c5963977ce0fa881cda265a</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; &amp;m) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a6b03892b923cac73317adfd8e5552394</anchor>
      <arglist>(const Matrix3x3T&lt; T &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator/</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a62edf6d9053acd377d3a8dd448dc1e16</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ac30250b36726ed4b2490af6fd4a4accd</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a670fbc9f39d9527e832f872f157b0180</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a54f2833fabdfca2c6102d4e1df1b9af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>norm</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aae25ededb041bda5530c74d28ef08ba7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>optimizedNorm</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ab52ccc451cb5cc53a9beab78a9f344a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>normsquared</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aaa5038b90264907668b3d88026afc7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsZero</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a1e82bb347c5a88794e0e70328c08ba00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator^</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a9afcde000bde98fc7678390fb94b666e</anchor>
      <arglist>(const Vector3T&lt; T, b &gt; &amp;v2) const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_x</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa694e29955b59a3d84fec9cd3a51e6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_y</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aeabf8d7c6bd910bf1f6dc8102fc353ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_z</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a00f9843cf7faebcc78021e0fa335d86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>af17ad8d38edfbbc16a6122d8b2d95cdd</anchor>
      <arglist>(std::ostream &amp;os, Vector3T&lt; T, normOptimization &gt; const &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector3T&lt; Scalar, false &gt;</name>
    <filename>structCD__Matrix_1_1Vector3T.html</filename>
    <base protection="protected">Norm&lt; Scalar, normOptimization &gt;</base>
    <member kind="typedef">
      <type>Vector3T&lt; Scalar, normOptimization &gt;</type>
      <name>Vector</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>afdfb94c0efeea9d9ccbf98a9cc146def</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>adf8640794b7cb06a462c90b23d9bdf33</anchor>
      <arglist>(Archive &amp;ar, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a8a6c4992766d238ad7acd2c1c3972141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ad5378e5f874bb539b2af93c414228632</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ab107c6c2ab3715c491be9e082b466da5</anchor>
      <arglist>(const Scalar *const p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector3T</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a25da756bac295da0d188e8beaa71919f</anchor>
      <arglist>(const struct Vector3T&lt; Scalar, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa76aced5918e609ab4a2dcff1fa14475</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>Set</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a29638e4284c28b299db83dd0914f58d7</anchor>
      <arglist>(const Scalar *const p)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T &amp;</type>
      <name>operator=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a39682b37cc76ba0b6264377e3d42c5cd</anchor>
      <arglist>(const struct Vector3T&lt; Scalar, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator-</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa61444a5832801b3bf5f2157e37a8426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator-</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a69ea3b57858ef1e69e69aafc64594404</anchor>
      <arglist>(const struct Vector3T&lt; Scalar, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a6df2d9a467040ad11c32598213f8e648</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>acf2a9dadbddf51f2a12eacfa00305949</anchor>
      <arglist>(unsigned i) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a18c518c0d48d57dbc64e2e18ca3bac74</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ae0b056f0cd2c8a5bb06bba8ac5578a13</anchor>
      <arglist>(const struct Vector3T&lt; Scalar, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator+</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa6b0fc7a53402accad9575d17d70b1cb</anchor>
      <arglist>(const struct Vector3T&lt; Scalar, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a28084751036a94cfbaddf41d618c6e13</anchor>
      <arglist>(const struct Vector3T&lt; Scalar, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a58fab30f953f554c1f2438f582b219c2</anchor>
      <arglist>(const struct Vector3T&lt; Scalar, b &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a92b9b34943d71391eb4451a9e4670c7f</anchor>
      <arglist>(const Scalar &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a6ee4fa8e85537333302ea08a96cf12ec</anchor>
      <arglist>(const Vector3T&lt; Scalar, b &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator*</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa32081789c5963977ce0fa881cda265a</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; &amp;m) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a6b03892b923cac73317adfd8e5552394</anchor>
      <arglist>(const Matrix3x3T&lt; Scalar &gt; m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ac30250b36726ed4b2490af6fd4a4accd</anchor>
      <arglist>(const Scalar &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator/</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a62edf6d9053acd377d3a8dd448dc1e16</anchor>
      <arglist>(const Scalar &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a670fbc9f39d9527e832f872f157b0180</anchor>
      <arglist>(const Scalar &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a54f2833fabdfca2c6102d4e1df1b9af7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aae25ededb041bda5530c74d28ef08ba7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>optimizedNorm</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>ab52ccc451cb5cc53a9beab78a9f344a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>normsquared</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aaa5038b90264907668b3d88026afc7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>IsZero</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a1e82bb347c5a88794e0e70328c08ba00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3T</type>
      <name>operator^</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a9afcde000bde98fc7678390fb94b666e</anchor>
      <arglist>(const Vector3T&lt; Scalar, b &gt; &amp;v2) const</arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m_x</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aa694e29955b59a3d84fec9cd3a51e6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m_y</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>aeabf8d7c6bd910bf1f6dc8102fc353ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Scalar</type>
      <name>m_z</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>a00f9843cf7faebcc78021e0fa335d86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>structCD__Matrix_1_1Vector3T.html</anchorfile>
      <anchor>af17ad8d38edfbbc16a6122d8b2d95cdd</anchor>
      <arglist>(std::ostream &amp;os, Vector3T&lt; Scalar, normOptimization &gt; const &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CD_Matrix::Vector4T</name>
    <filename>classCD__Matrix_1_1Vector4T.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Vector4T</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a1118000c38ab898af0ccf246905d826a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector4T</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a41c14ea891a34a9c7b3353ccedb5c953</anchor>
      <arglist>(const T &amp;x, const T &amp;y, const T &amp;z, const T &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>Vector4T&lt; T &gt;</type>
      <name>operator=</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a713b2e0d8aaecee5961d2a57e002be93</anchor>
      <arglist>(const Vector4T&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4T&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>ada60933181dfa215e9d11b4ad3abd54a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>ada437e65361bd2e3bf513df2a6938176</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>ab3c6020d5785258bb608421dbccd9a45</anchor>
      <arglist>(unsigned i) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>aba97f3b57c4e7ff9b67b6d0bf492db91</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a7752f538f0cde46f95230f8a58dfee71</anchor>
      <arglist>(const Vector4T&lt; T &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4T&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a9ae555580c958d7c4efd9305bc8afbf4</anchor>
      <arglist>(const Vector4T&lt; T &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4T&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a4848ba3cf9b1e1e933963e2490e551bc</anchor>
      <arglist>(const Vector4T&lt; T &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a4d5d4368ef4cb23afc58a0d84cbc1758</anchor>
      <arglist>(const Vector4T&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>af6e13dc0ac7c5b35346ddfe7c4afacc0</anchor>
      <arglist>(const Vector4T&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vector4T&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>adf4fac55a98b85ec45d205407f1045a0</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4T&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a291ae7ec1838fa739bf9969ae71f57be</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>acb09c4e0bee18622c24ff8999511d502</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a2a59c2aaa8ee4322aa062d3573a8bbc5</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a7dff2ac0213f928bc8ddba4644a7b33a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>norm</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>aeddfe4c52cf74f90b18250cc4f1dbd84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>normsquared</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a6dc8e02bfbc362aac8ccdc47bf13b39f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_x</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a35e8a9286beb949e293eb5ac7cbf64c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_y</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a34b5efe35a00d80dd7287370fca67150</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_z</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a3a3cdd7736618c9c654086009470ed54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>m_w</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>abc51da1ac72a61d84deb08603ae27a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classCD__Matrix_1_1Vector4T.html</anchorfile>
      <anchor>a7ebb88fbe2046b1f4d14d88115f6998a</anchor>
      <arglist>(std::ostream &amp;os, Vector4T&lt; T &gt; const &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost</name>
    <filename>namespaceboost.html</filename>
    <namespace>boost::archive</namespace>
    <namespace>boost::serialization</namespace>
  </compound>
  <compound kind="namespace">
    <name>boost::archive</name>
    <filename>namespaceboost_1_1archive.html</filename>
    <namespace>boost::archive::detail</namespace>
    <class kind="struct">boost::archive::check_tracking</class>
    <class kind="class">boost::archive::save_access</class>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceboost_1_1archive.html</anchorfile>
      <anchor>a75235f1208f1e4e1e183768d5e02944a</anchor>
      <arglist>(Archive &amp;ar, const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>namespaceboost_1_1archive.html</anchorfile>
      <anchor>abd00bd2825ffa3546381a676b8d0cec5</anchor>
      <arglist>(Archive &amp;ar, T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost::archive::detail</name>
    <filename>namespaceboost_1_1archive_1_1detail.html</filename>
    <class kind="class">boost::archive::detail::oserializer</class>
    <class kind="class">boost::archive::detail::pointer_oserializer</class>
    <class kind="struct">boost::archive::detail::save_array_type</class>
    <class kind="struct">boost::archive::detail::save_enum_type</class>
    <class kind="struct">boost::archive::detail::save_non_pointer_type</class>
    <class kind="struct">boost::archive::detail::save_pointer_type</class>
    <member kind="function">
      <type>BOOST_DLLEXPORT const basic_pointer_oserializer &amp;</type>
      <name>instantiate_pointer_oserializer</name>
      <anchorfile>namespaceboost_1_1archive_1_1detail.html</anchorfile>
      <anchor>a36a969c98d97fb6bba03fb0646613a94</anchor>
      <arglist>(Archive *, T *) BOOST_USED</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost::serialization</name>
    <filename>namespaceboost_1_1serialization.html</filename>
  </compound>
  <compound kind="namespace">
    <name>CD_Matrix</name>
    <filename>namespaceCD__Matrix.html</filename>
    <class kind="struct">CD_Matrix::Matrix3x3T</class>
    <class kind="struct">CD_Matrix::Matrix4x4T</class>
    <class kind="struct">CD_Matrix::Norm</class>
    <class kind="struct">CD_Matrix::Norm&lt; T, false &gt;</class>
    <class kind="class">CD_Matrix::QuaternionT</class>
    <class kind="struct">CD_Matrix::Vector3T</class>
    <class kind="class">CD_Matrix::Vector4T</class>
  </compound>
  <compound kind="namespace">
    <name>FileParsing</name>
    <filename>namespaceFileParsing.html</filename>
    <class kind="class">FileParsing::SimplestParsing</class>
  </compound>
  <compound kind="namespace">
    <name>sch</name>
    <filename>namespacesch.html</filename>
    <class kind="struct">sch::_TimeStamp</class>
    <class kind="class">sch::CD_Depth</class>
    <class kind="class">sch::CD_Pair</class>
    <class kind="class">sch::CD_Scene</class>
    <class kind="class">sch::CD_Simplex</class>
    <class kind="class">sch::CD_SimplexEnhanced</class>
    <class kind="struct">sch::CD_SimplexKeptPoints</class>
    <class kind="struct">sch::Geometry</class>
    <class kind="struct">sch::Polyhedron_algorithms</class>
    <class kind="struct">sch::PolyhedronTriangle</class>
    <class kind="class">sch::S_Box</class>
    <class kind="class">sch::S_Capsule</class>
    <class kind="class">sch::S_Cone</class>
    <class kind="class">sch::S_Cylinder</class>
    <class kind="class">sch::S_Object</class>
    <class kind="class">sch::S_ObjectNonNormalized</class>
    <class kind="class">sch::S_ObjectNormalized</class>
    <class kind="class">sch::S_Point</class>
    <class kind="class">sch::s_PointsComparator</class>
    <class kind="class">sch::S_Polyhedron</class>
    <class kind="class">sch::S_PolyhedronVertex</class>
    <class kind="class">sch::S_Sphere</class>
    <class kind="struct">sch::s_SphereApproxim</class>
    <class kind="struct">sch::s_STN_VVR</class>
    <class kind="struct">sch::s_STP_Circle</class>
    <class kind="struct">sch::s_STP_STBVData</class>
    <class kind="struct">sch::s_STP_VVR</class>
    <class kind="class">sch::S_Superellipsoid</class>
    <class kind="struct">sch::s_toruslinkedBV</class>
    <class kind="struct">sch::s_Triangle</class>
    <class kind="class">sch::STP_BigSphere</class>
    <class kind="class">sch::STP_BV</class>
    <class kind="class">sch::STP_BV_P</class>
    <class kind="class">sch::STP_Feature</class>
    <class kind="class">sch::STP_SmallSphere</class>
    <class kind="class">sch::STP_Torus</class>
    <member kind="typedef">
      <type>double</type>
      <name>Scalar</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a23db84571b7527634d5e5d5fd69995e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector3T&lt; Scalar, false &gt;</type>
      <name>Vector3</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a26a421e6cdc08aedcfc5b9c68277f657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector4T&lt; Scalar &gt;</type>
      <name>Vector4</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a4054ebd9c67e205f14399d288090905b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Point3</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ab0c5b1c6e2f86393e75ee9e55e346509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Matrix3x3T&lt; Scalar &gt;</type>
      <name>Matrix3x3</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ad62be10192b061dcae7b013d0f5e194e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::QuaternionT&lt; Scalar &gt;</type>
      <name>Quaternion</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a84a5f2e4a6807b76657edddbd1b53db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Matrix4x4T&lt; Scalar &gt;</type>
      <name>Matrix4x4</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a3041e1b0d9a898938dd026b1bd3d4112</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CD_Matrix::Vector3T&lt; Scalar, true &gt;</type>
      <name>Vector3NormOptimized</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a49d67c4c14d4386acdf2f084e68d4700</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::_TimeStamp</type>
      <name>S_ObjectTimeStamp</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ab167976403857dc3577c4cd022c6c13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_toruslinkedBV</type>
      <name>toruslinkedBV</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a5acd0335a65507856bfecf941193515e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_Triangle</type>
      <name>Triangle</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ad02b3d5e368caaabe1eff7ad33d557ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_SphereApproxim</type>
      <name>SphereApproxim</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a50488b6de166145f7320dc22de55de99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_PointsComparator</type>
      <name>PointsComparator</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a44c4f840424fb70e78a6f19f89fd08c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STP_VVR</type>
      <name>STP_VVR</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>abbeaad29b70f4c43093dcb7daecf9b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STN_VVR</type>
      <name>STN_VVR</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a43b208a34398f097c2c7e5cb780c5da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STP_STBVData</type>
      <name>STP_STBVData</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a386e496f31b5959dc743fcb86b42b513</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sch::s_STP_Circle</type>
      <name>STP_Circle</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>ae46e0ff886e55423b0e240b172cf46bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CD_SimplexType</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Point</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11baa5c6082a32a66d4af6003761ea6deda3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Segment</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bab36aa1ddee8b169c10a889a4e3ab1b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Triangle</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bafc5b37fbb4c185050a98a5aed180bc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_Tetrahedron</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11ba2f2014cdc3df6cf071f4a69eaa35dbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CD_None</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a930a706e3c80e6ede6f68e34809da11bacf450d6b46df39b660bbb358db5141e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveType</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINARY_ARCHIVE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9a3dd05585336ccf671c6058e2782b549c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TEXT_ARCHIVE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aec0f4168a7c3d90bebc8db0c1f6c8fa9a9962c77094354fe5e99e8e1f32dffd93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>STP_Featuretype</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALLSPHERE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384aadf03b67ba0cfd2c8e3981f9ac9545d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIGSPHERE</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384a79d68d1e7ce2544bcc02887372df84c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TORUS</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>aaa9a2e71c9a9687a84c75aa15b75f384ae7bbb858d6b41ad95de52f0347a57688</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchangeTest</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>a284a80995524c3d5eaed3ea51da13643</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>CD_SimplexExchange</name>
      <anchorfile>namespacesch.html</anchorfile>
      <anchor>abdc7bf615642be512fefd34ee873f968</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>sch-core</title>
    <filename>index</filename>
  </compound>
</tagfile>
